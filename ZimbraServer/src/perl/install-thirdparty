#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Synacor, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software Foundation,
# version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
# ***** END LICENSE BLOCK *****
# 

use strict;

use File::Basename;

if (scalar(@ARGV) != 1) {
    print(STDERR "Usage: install-thirdparty <p4-branch-name>\n");
    exit(1);
}

my $BASE_DIR = "/opt/zimbra";
my $CACHE_DIR = "$BASE_DIR/third-party-cache";
my $LIB_DIR = "$BASE_DIR/lib/";
my $THIRD_PARTY_BUILDS_DIR = "//depot/zimbra/$ARGV[0]/ThirdPartyBuilds/";
my $GET_PLAT_TAG = dirname($0) . "/../../../ZimbraBuild/rpmconf/Build/get_plat_tag.sh";
my $COMMON_DEFS = dirname($0) . "/../../../ZimbraBuild/defs/plat_common.def";
my $P4_ROOT = $THIRD_PARTY_BUILDS_DIR . getPlatformDirName();
my $JETTY_P4_PATH = "//depot/zimbra/$ARGV[0]/ThirdParty/jetty";
my %BINARIES = (
    "jetty" => "distribution-9.3.5.v20151012",
);
my $P4_CMD = "p4";

if (! -d $CACHE_DIR) {
    mkdir($CACHE_DIR) || die "Could not create directory: $CACHE_DIR";
}

if (! -d $LIB_DIR) {
    mkdir($LIB_DIR) || die "Could not create directory: $LIB_DIR";
}

# Only use the hardcoded versions on Mac OS X, as the linux binaries are
# usually up-to-date.
if ($^O ne 'darwin') {
    my $cmd = "make -p -f $COMMON_DEFS 2>&1";

    print("$cmd\n");
    open(my $fh, '-|', $cmd) || die "command returned $?: $!";

    while (my $line = <$fh>) {
        chomp $line;

        if ($line =~ /^[A-Z_]*_VERSION /) {
            my ($binary, $version) = split(/_VERSION :?= /, $line);
            $binary = lc $binary;

            if ($binary eq 'jetty') {
                $BINARIES{'jetty'} = 'distribution-' . $version;
            }
        }
    }

    close($fh);
}

# Remove old binaries to make sure there's no cruft.
for my $binaryName (keys %BINARIES) {
    my $version = $BINARIES{$binaryName};
    my $cmd = "rm -rf $BASE_DIR/$binaryName $BASE_DIR/$binaryName-$version";
    runCommand($cmd);
}

for my $binaryName (keys %BINARIES) {
    my $version = $BINARIES{$binaryName};
    my $cmd;
    my $p4Path;

    if ($binaryName eq "jetty") {
        $p4Path = "$JETTY_P4_PATH/jetty-$version.tar.gz";
    }

    # Copy tarball to the third party cache directory if necessary.
    my $tarball = "$CACHE_DIR/$binaryName-$version.tgz";
    if (! -f $tarball) {
        $cmd = "$P4_CMD print -o $tarball $p4Path";
        runCommand($cmd);
    }

    # Untar.
    $cmd = "tar -xzf $tarball -C $BASE_DIR";
    runCommand($cmd);

    # Symlink.
    if ($binaryName ne "openldap-libs") {
        symlink("$BASE_DIR/$binaryName-$version", "$BASE_DIR/$binaryName") || die "Could not create symlink for $binaryName";
    }
}

installJunixsocketNativeLib();

sub runCommand($) {
    my $cmd = shift();
    print("$cmd\n");
    system($cmd);
    if ($? != 0) {
	print(STDERR "An error occurred while running '$cmd'");
	if (defined($!)) {
	    print(STDERR ": $!");
	}
	print(STDERR "\n");
	exit(1);
    }
}

sub getPlatformDirName() {
    my @cmd = $GET_PLAT_TAG;
    print @cmd, "\n";
    open(my $fh, '-|', @cmd) || die "command returned $?: $!";
    my $dirName = join("", <$fh>);
    chomp($dirName);

    # Treat Lion and later as one, and don't care for Leopard and earlier.
    if ($dirName =~ /MACOSXx86_10\.[^6]/) {
        $dirName = "MACOSXx86_10.7";
    }

    return $dirName;
}

sub installJunixsocketNativeLib() {
    my $cmd;
    my $srcDir;
    my $srcName;
    
    my $libSrcDir = "/java/junixsocket/";
    my $libPrefix = "libjunixsocket";
    
    if ($^O eq "darwin") {
        $srcDir = $THIRD_PARTY_BUILDS_DIR . "OSXx86_64" . $libSrcDir;
        $srcName = "$libPrefix-macosx-1.5-x86_64.dylib";
    } else {
        $srcDir = $THIRD_PARTY_BUILDS_DIR . "x86_64" . $libSrcDir;
        $srcName = "$libPrefix-linux-1.5-amd64.so";
    }
    
    my $srcPath = $srcDir . $srcName;
    my $destPath = $LIB_DIR . $srcName;
    
    # print(STDERR "srcPath is: $srcPath\n");
    # print(STDERR "destPath is: $destPath\n");
    
    # Remove old binaries to make sure there's no cruft.
    $cmd = "rm -rf $LIB_DIR" . "$libPrefix*";
    runCommand($cmd);
    
    # Copy file to the third party cache directory if necessary.
    my $cachedPath = "$CACHE_DIR/$srcName";
    if (! -f $cachedPath) {
        $cmd = "$P4_CMD print -o $cachedPath $srcPath";
        runCommand($cmd);
    }
    
    # Copy file from the third party cache directory to the destination 
    $cmd = "cp $cachedPath $destPath";
    runCommand($cmd);
}

/*
 * ***** BEGIN LICENSE BLOCK *****
 * Zimbra Collaboration Suite CSharp Client
 * Copyright (C) 2014, 2016 Synacor, Inc.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software Foundation,
 * version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 * ***** END LICENSE BLOCK *****
 */
// Created by Microsoft (R) C/C++ Compiler Version 13.10.3077 (5c345909).
//
// c:\src\main\playground\calendardev\debug\msoutl.tli
//
// Wrapper implementations for Win32 type library C:\Program Files\Microsoft Office\OFFICE11\msoutl.olb
// compiler-generated file created 10/26/05 at 21:58:37 - DO NOT EDIT!


//
// dispinterface SyncObjectEvents wrapper method implementations
//

#pragma implementation_key(1)
inline HRESULT Olk::SyncObjectEvents::SyncStart ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(2)
inline HRESULT Olk::SyncObjectEvents::Progress ( enum OlSyncState State, _bstr_t Description, long Value, long Max ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008\x0003\x0003", State, (BSTR)Description, Value, Max);
}

#pragma implementation_key(3)
inline HRESULT Olk::SyncObjectEvents::OnError ( long Code, _bstr_t Description ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", Code, (BSTR)Description);
}

#pragma implementation_key(4)
inline HRESULT Olk::SyncObjectEvents::SyncEnd ( ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ExplorerEvents wrapper method implementations
//

#pragma implementation_key(5)
inline HRESULT Olk::ExplorerEvents::Activate ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(6)
inline HRESULT Olk::ExplorerEvents::FolderSwitch ( ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(7)
inline HRESULT Olk::ExplorerEvents::BeforeFolderSwitch ( IDispatch * NewFolder, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", NewFolder, Cancel);
}

#pragma implementation_key(8)
inline HRESULT Olk::ExplorerEvents::ViewSwitch ( ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(9)
inline HRESULT Olk::ExplorerEvents::BeforeViewSwitch ( const _variant_t & NewView, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x400b", &NewView, Cancel);
}

#pragma implementation_key(10)
inline HRESULT Olk::ExplorerEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(11)
inline HRESULT Olk::ExplorerEvents::SelectionChange ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(12)
inline HRESULT Olk::ExplorerEvents::Close ( ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ExplorerEvents_10 wrapper method implementations
//

#pragma implementation_key(13)
inline HRESULT Olk::ExplorerEvents_10::Activate ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(14)
inline HRESULT Olk::ExplorerEvents_10::FolderSwitch ( ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(15)
inline HRESULT Olk::ExplorerEvents_10::BeforeFolderSwitch ( IDispatch * NewFolder, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", NewFolder, Cancel);
}

#pragma implementation_key(16)
inline HRESULT Olk::ExplorerEvents_10::ViewSwitch ( ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(17)
inline HRESULT Olk::ExplorerEvents_10::BeforeViewSwitch ( const _variant_t & NewView, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x000c\x400b", &NewView, Cancel);
}

#pragma implementation_key(18)
inline HRESULT Olk::ExplorerEvents_10::Deactivate ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(19)
inline HRESULT Olk::ExplorerEvents_10::SelectionChange ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(20)
inline HRESULT Olk::ExplorerEvents_10::Close ( ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(21)
inline HRESULT Olk::ExplorerEvents_10::BeforeMaximize ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(22)
inline HRESULT Olk::ExplorerEvents_10::BeforeMinimize ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(23)
inline HRESULT Olk::ExplorerEvents_10::BeforeMove ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(24)
inline HRESULT Olk::ExplorerEvents_10::BeforeSize ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(25)
inline HRESULT Olk::ExplorerEvents_10::BeforeItemCopy ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa0e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(26)
inline HRESULT Olk::ExplorerEvents_10::BeforeItemCut ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa0f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(27)
inline HRESULT Olk::ExplorerEvents_10::BeforeItemPaste ( VARIANT * ClipboardContent, struct MAPIFolder * Target, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400c\x0009\x400b", ClipboardContent, Target, Cancel);
}

//
// dispinterface InspectorEvents wrapper method implementations
//

#pragma implementation_key(28)
inline HRESULT Olk::InspectorEvents::Activate ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(29)
inline HRESULT Olk::InspectorEvents::Deactivate ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(30)
inline HRESULT Olk::InspectorEvents::Close ( ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface InspectorEvents_10 wrapper method implementations
//

#pragma implementation_key(31)
inline HRESULT Olk::InspectorEvents_10::Activate ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(32)
inline HRESULT Olk::InspectorEvents_10::Deactivate ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(33)
inline HRESULT Olk::InspectorEvents_10::Close ( ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(34)
inline HRESULT Olk::InspectorEvents_10::BeforeMaximize ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(35)
inline HRESULT Olk::InspectorEvents_10::BeforeMinimize ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(36)
inline HRESULT Olk::InspectorEvents_10::BeforeMove ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa13, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(37)
inline HRESULT Olk::InspectorEvents_10::BeforeSize ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

//
// dispinterface ApplicationEvents wrapper method implementations
//

#pragma implementation_key(38)
inline HRESULT Olk::ApplicationEvents::ItemSend ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Item, Cancel);
}

#pragma implementation_key(39)
inline HRESULT Olk::ApplicationEvents::NewMail ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(40)
inline HRESULT Olk::ApplicationEvents::Reminder ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(41)
inline HRESULT Olk::ApplicationEvents::OptionsPagesAdd ( struct PropertyPages * Pages ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Pages);
}

#pragma implementation_key(42)
inline HRESULT Olk::ApplicationEvents::Startup ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(43)
inline HRESULT Olk::ApplicationEvents::Quit ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ItemEvents wrapper method implementations
//

#pragma implementation_key(44)
inline HRESULT Olk::ItemEvents::Open ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(45)
inline HRESULT Olk::ItemEvents::CustomAction ( IDispatch * Action, IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Action, Response, Cancel);
}

#pragma implementation_key(46)
inline HRESULT Olk::ItemEvents::CustomPropertyChange ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(47)
inline HRESULT Olk::ItemEvents::Forward ( IDispatch * Forward, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf468, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Forward, Cancel);
}

#pragma implementation_key(48)
inline HRESULT Olk::ItemEvents::Close ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(49)
inline HRESULT Olk::ItemEvents::PropertyChange ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xf009, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(50)
inline HRESULT Olk::ItemEvents::Read ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(51)
inline HRESULT Olk::ItemEvents::Reply ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf466, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Response, Cancel);
}

#pragma implementation_key(52)
inline HRESULT Olk::ItemEvents::ReplyAll ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf467, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Response, Cancel);
}

#pragma implementation_key(53)
inline HRESULT Olk::ItemEvents::Send ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(54)
inline HRESULT Olk::ItemEvents::Write ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(55)
inline HRESULT Olk::ItemEvents::BeforeCheckNames ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf00a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(56)
inline HRESULT Olk::ItemEvents::AttachmentAdd ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xf00b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(57)
inline HRESULT Olk::ItemEvents::AttachmentRead ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xf00c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(58)
inline HRESULT Olk::ItemEvents::BeforeAttachmentSave ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf00d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

//
// dispinterface ItemEvents_10 wrapper method implementations
//

#pragma implementation_key(59)
inline HRESULT Olk::ItemEvents_10::Open ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(60)
inline HRESULT Olk::ItemEvents_10::CustomAction ( IDispatch * Action, IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x400b", Action, Response, Cancel);
}

#pragma implementation_key(61)
inline HRESULT Olk::ItemEvents_10::CustomPropertyChange ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xf008, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(62)
inline HRESULT Olk::ItemEvents_10::Forward ( IDispatch * Forward, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf468, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Forward, Cancel);
}

#pragma implementation_key(63)
inline HRESULT Olk::ItemEvents_10::Close ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(64)
inline HRESULT Olk::ItemEvents_10::PropertyChange ( _bstr_t Name ) {
    return _com_dispatch_method(this, 0xf009, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)Name);
}

#pragma implementation_key(65)
inline HRESULT Olk::ItemEvents_10::Read ( ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(66)
inline HRESULT Olk::ItemEvents_10::Reply ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf466, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Response, Cancel);
}

#pragma implementation_key(67)
inline HRESULT Olk::ItemEvents_10::ReplyAll ( IDispatch * Response, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf467, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Response, Cancel);
}

#pragma implementation_key(68)
inline HRESULT Olk::ItemEvents_10::Send ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(69)
inline HRESULT Olk::ItemEvents_10::Write ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(70)
inline HRESULT Olk::ItemEvents_10::BeforeCheckNames ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf00a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(71)
inline HRESULT Olk::ItemEvents_10::AttachmentAdd ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xf00b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(72)
inline HRESULT Olk::ItemEvents_10::AttachmentRead ( struct Attachment * Attachment ) {
    return _com_dispatch_method(this, 0xf00c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Attachment);
}

#pragma implementation_key(73)
inline HRESULT Olk::ItemEvents_10::BeforeAttachmentSave ( struct Attachment * Attachment, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf00d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Attachment, Cancel);
}

#pragma implementation_key(74)
inline HRESULT Olk::ItemEvents_10::BeforeDelete ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa75, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Item, Cancel);
}

//
// dispinterface ExplorersEvents wrapper method implementations
//

#pragma implementation_key(75)
inline HRESULT Olk::ExplorersEvents::NewExplorer ( struct _Explorer * Explorer ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Explorer);
}

//
// dispinterface FoldersEvents wrapper method implementations
//

#pragma implementation_key(76)
inline HRESULT Olk::FoldersEvents::FolderAdd ( struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Folder);
}

#pragma implementation_key(77)
inline HRESULT Olk::FoldersEvents::FolderChange ( struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Folder);
}

#pragma implementation_key(78)
inline HRESULT Olk::FoldersEvents::FolderRemove ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface InspectorsEvents wrapper method implementations
//

#pragma implementation_key(79)
inline HRESULT Olk::InspectorsEvents::NewInspector ( struct _Inspector * Inspector ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Inspector);
}

//
// dispinterface ItemsEvents wrapper method implementations
//

#pragma implementation_key(80)
inline HRESULT Olk::ItemsEvents::ItemAdd ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(81)
inline HRESULT Olk::ItemsEvents::ItemChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(82)
inline HRESULT Olk::ItemsEvents::ItemRemove ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface NameSpaceEvents wrapper method implementations
//

#pragma implementation_key(83)
inline HRESULT Olk::NameSpaceEvents::OptionsPagesAdd ( struct PropertyPages * Pages, struct MAPIFolder * Folder ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", Pages, Folder);
}

//
// dispinterface OutlookBarGroupsEvents wrapper method implementations
//

#pragma implementation_key(84)
inline HRESULT Olk::OutlookBarGroupsEvents::GroupAdd ( struct OutlookBarGroup * NewGroup ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NewGroup);
}

#pragma implementation_key(85)
inline HRESULT Olk::OutlookBarGroupsEvents::BeforeGroupAdd ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(86)
inline HRESULT Olk::OutlookBarGroupsEvents::BeforeGroupRemove ( struct OutlookBarGroup * Group, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Group, Cancel);
}

//
// dispinterface OutlookBarPaneEvents wrapper method implementations
//

#pragma implementation_key(87)
inline HRESULT Olk::OutlookBarPaneEvents::BeforeNavigate ( struct OutlookBarShortcut * Shortcut, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Shortcut, Cancel);
}

#pragma implementation_key(88)
inline HRESULT Olk::OutlookBarPaneEvents::BeforeGroupSwitch ( struct OutlookBarGroup * ToGroup, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", ToGroup, Cancel);
}

//
// dispinterface OutlookBarShortcutsEvents wrapper method implementations
//

#pragma implementation_key(89)
inline HRESULT Olk::OutlookBarShortcutsEvents::ShortcutAdd ( struct OutlookBarShortcut * NewShortcut ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NewShortcut);
}

#pragma implementation_key(90)
inline HRESULT Olk::OutlookBarShortcutsEvents::BeforeShortcutAdd ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(91)
inline HRESULT Olk::OutlookBarShortcutsEvents::BeforeShortcutRemove ( struct OutlookBarShortcut * Shortcut, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Shortcut, Cancel);
}

//
// interface PropertyPage wrapper method implementations
//

#pragma implementation_key(92)
inline HRESULT Olk::PropertyPage::GetPageInfo ( BSTR * HelpFile, long * HelpContext ) {
    HRESULT _hr = raw_GetPageInfo(HelpFile, HelpContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(93)
inline VARIANT_BOOL Olk::PropertyPage::GetDirty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Dirty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline HRESULT Olk::PropertyPage::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ApplicationEvents_10 wrapper method implementations
//

#pragma implementation_key(95)
inline HRESULT Olk::ApplicationEvents_10::ItemSend ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Item, Cancel);
}

#pragma implementation_key(96)
inline HRESULT Olk::ApplicationEvents_10::NewMail ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(97)
inline HRESULT Olk::ApplicationEvents_10::Reminder ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(98)
inline HRESULT Olk::ApplicationEvents_10::OptionsPagesAdd ( struct PropertyPages * Pages ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Pages);
}

#pragma implementation_key(99)
inline HRESULT Olk::ApplicationEvents_10::Startup ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(100)
inline HRESULT Olk::ApplicationEvents_10::Quit ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(101)
inline HRESULT Olk::ApplicationEvents_10::AdvancedSearchComplete ( struct Search * SearchObject ) {
    return _com_dispatch_method(this, 0xfa6a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SearchObject);
}

#pragma implementation_key(102)
inline HRESULT Olk::ApplicationEvents_10::AdvancedSearchStopped ( struct Search * SearchObject ) {
    return _com_dispatch_method(this, 0xfa6b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SearchObject);
}

#pragma implementation_key(103)
inline HRESULT Olk::ApplicationEvents_10::MAPILogonComplete ( ) {
    return _com_dispatch_method(this, 0xfa90, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface ApplicationEvents_11 wrapper method implementations
//

#pragma implementation_key(104)
inline HRESULT Olk::ApplicationEvents_11::ItemSend ( IDispatch * Item, VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Item, Cancel);
}

#pragma implementation_key(105)
inline HRESULT Olk::ApplicationEvents_11::NewMail ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(106)
inline HRESULT Olk::ApplicationEvents_11::Reminder ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf004, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(107)
inline HRESULT Olk::ApplicationEvents_11::OptionsPagesAdd ( struct PropertyPages * Pages ) {
    return _com_dispatch_method(this, 0xf005, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Pages);
}

#pragma implementation_key(108)
inline HRESULT Olk::ApplicationEvents_11::Startup ( ) {
    return _com_dispatch_method(this, 0xf006, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(109)
inline HRESULT Olk::ApplicationEvents_11::Quit ( ) {
    return _com_dispatch_method(this, 0xf007, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(110)
inline HRESULT Olk::ApplicationEvents_11::AdvancedSearchComplete ( struct Search * SearchObject ) {
    return _com_dispatch_method(this, 0xfa6a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SearchObject);
}

#pragma implementation_key(111)
inline HRESULT Olk::ApplicationEvents_11::AdvancedSearchStopped ( struct Search * SearchObject ) {
    return _com_dispatch_method(this, 0xfa6b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", SearchObject);
}

#pragma implementation_key(112)
inline HRESULT Olk::ApplicationEvents_11::MAPILogonComplete ( ) {
    return _com_dispatch_method(this, 0xfa90, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(113)
inline HRESULT Olk::ApplicationEvents_11::NewMailEx ( _bstr_t EntryIDCollection ) {
    return _com_dispatch_method(this, 0xfab5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)EntryIDCollection);
}

//
// dispinterface ResultsEvents wrapper method implementations
//

#pragma implementation_key(114)
inline HRESULT Olk::ResultsEvents::ItemAdd ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf001, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(115)
inline HRESULT Olk::ResultsEvents::ItemChange ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0xf002, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

#pragma implementation_key(116)
inline HRESULT Olk::ResultsEvents::ItemRemove ( ) {
    return _com_dispatch_method(this, 0xf003, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _ViewsEvents wrapper method implementations
//

#pragma implementation_key(117)
inline HRESULT Olk::_ViewsEvents::ViewAdd ( struct View * View ) {
    return _com_dispatch_method(this, 0x190, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", View);
}

#pragma implementation_key(118)
inline HRESULT Olk::_ViewsEvents::ViewRemove ( struct View * View ) {
    return _com_dispatch_method(this, 0xfa47, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", View);
}

//
// dispinterface ReminderCollectionEvents wrapper method implementations
//

#pragma implementation_key(119)
inline HRESULT Olk::ReminderCollectionEvents::BeforeReminderShow ( VARIANT_BOOL * Cancel ) {
    return _com_dispatch_method(this, 0xfa93, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Cancel);
}

#pragma implementation_key(120)
inline HRESULT Olk::ReminderCollectionEvents::ReminderAdd ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa94, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

#pragma implementation_key(121)
inline HRESULT Olk::ReminderCollectionEvents::ReminderChange ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa95, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

#pragma implementation_key(122)
inline HRESULT Olk::ReminderCollectionEvents::ReminderFire ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa96, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

#pragma implementation_key(123)
inline HRESULT Olk::ReminderCollectionEvents::ReminderRemove ( ) {
    return _com_dispatch_method(this, 0xfa97, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

#pragma implementation_key(124)
inline HRESULT Olk::ReminderCollectionEvents::Snooze ( struct _Reminder * ReminderObject ) {
    return _com_dispatch_method(this, 0xfa98, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", ReminderObject);
}

//
// interface _IRecipientControl wrapper method implementations
//

#pragma implementation_key(125)
inline char Olk::_IRecipientControl::GetEnabled ( ) {
    char _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(126)
inline void Olk::_IRecipientControl::PutEnabled ( char Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(127)
inline long Olk::_IRecipientControl::GetBackColor ( ) {
    long _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline void Olk::_IRecipientControl::PutBackColor ( long BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(129)
inline long Olk::_IRecipientControl::GetForeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(130)
inline void Olk::_IRecipientControl::PutForeColor ( long ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(131)
inline char Olk::_IRecipientControl::GetReadOnly ( ) {
    char _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline void Olk::_IRecipientControl::PutReadOnly ( char ReadOnly ) {
    HRESULT _hr = put_ReadOnly(ReadOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(133)
inline IDispatchPtr Olk::_IRecipientControl::GetFont ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(134)
inline void Olk::_IRecipientControl::PutFont ( IDispatch * Font ) {
    HRESULT _hr = put_Font(Font);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(135)
inline long Olk::_IRecipientControl::GetSpecialEffect ( ) {
    long _result = 0;
    HRESULT _hr = get_SpecialEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(136)
inline void Olk::_IRecipientControl::PutSpecialEffect ( long Effect ) {
    HRESULT _hr = put_SpecialEffect(Effect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _DRecipientControl wrapper method implementations
//

#pragma implementation_key(137)
inline char Olk::_DRecipientControl::GetEnabled ( ) {
    char _result = 0;
    _com_dispatch_method(this, DISPID_ENABLED, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(138)
inline void Olk::_DRecipientControl::PutEnabled ( char _arg1 ) {
    _com_dispatch_method(this, DISPID_ENABLED, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

#pragma implementation_key(139)
inline long Olk::_DRecipientControl::GetBackColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, DISPID_BACKCOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(140)
inline void Olk::_DRecipientControl::PutBackColor ( long _arg1 ) {
    _com_dispatch_method(this, DISPID_BACKCOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(141)
inline long Olk::_DRecipientControl::GetForeColor ( ) {
    long _result = 0;
    _com_dispatch_method(this, DISPID_FORECOLOR, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(142)
inline void Olk::_DRecipientControl::PutForeColor ( long _arg1 ) {
    _com_dispatch_method(this, DISPID_FORECOLOR, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

#pragma implementation_key(143)
inline char Olk::_DRecipientControl::GetReadOnly ( ) {
    char _result = 0;
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(144)
inline void Olk::_DRecipientControl::PutReadOnly ( char _arg1 ) {
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

#pragma implementation_key(145)
inline IDispatchPtr Olk::_DRecipientControl::GetFont ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, DISPID_FONT, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(146)
inline void Olk::_DRecipientControl::PutFont ( IDispatch * _arg1 ) {
    _com_dispatch_method(this, DISPID_FONT, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

#pragma implementation_key(147)
inline long Olk::_DRecipientControl::GetSpecialEffect ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(148)
inline void Olk::_DRecipientControl::PutSpecialEffect ( long _arg1 ) {
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0003", _arg1);
}

//
// interface _IDocSiteControl wrapper method implementations
//

#pragma implementation_key(149)
inline char Olk::_IDocSiteControl::GetReadOnly ( ) {
    char _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void Olk::_IDocSiteControl::PutReadOnly ( char ReadOnly ) {
    HRESULT _hr = put_ReadOnly(ReadOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// dispinterface _DDocSiteControl wrapper method implementations
//

#pragma implementation_key(151)
inline char Olk::_DDocSiteControl::GetReadOnly ( ) {
    char _result = 0;
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYGET, VT_UI1, (void*)&_result, NULL);
    return _result;
}

#pragma implementation_key(152)
inline void Olk::_DDocSiteControl::PutReadOnly ( char _arg1 ) {
    _com_dispatch_method(this, 0x8001f008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0011", _arg1);
}

//
// interface Action wrapper method implementations
//

#pragma implementation_key(153)
inline Olk::_ApplicationPtr Olk::Action::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(154)
inline enum Olk::OlObjectClass Olk::Action::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(155)
inline Olk::_NameSpacePtr Olk::Action::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(156)
inline IDispatchPtr Olk::Action::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(157)
inline enum Olk::OlActionCopyLike Olk::Action::GetCopyLike ( ) {
    enum OlActionCopyLike _result;
    HRESULT _hr = get_CopyLike(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline void Olk::Action::PutCopyLike ( enum OlActionCopyLike CopyLike ) {
    HRESULT _hr = put_CopyLike(CopyLike);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(159)
inline VARIANT_BOOL Olk::Action::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(160)
inline void Olk::Action::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(161)
inline _bstr_t Olk::Action::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(162)
inline void Olk::Action::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(163)
inline _bstr_t Olk::Action::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(164)
inline void Olk::Action::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(165)
inline _bstr_t Olk::Action::GetPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(166)
inline void Olk::Action::PutPrefix ( _bstr_t Prefix ) {
    HRESULT _hr = put_Prefix(Prefix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(167)
inline enum Olk::OlActionReplyStyle Olk::Action::GetReplyStyle ( ) {
    enum OlActionReplyStyle _result;
    HRESULT _hr = get_ReplyStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(168)
inline void Olk::Action::PutReplyStyle ( enum OlActionReplyStyle ReplyStyle ) {
    HRESULT _hr = put_ReplyStyle(ReplyStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(169)
inline enum Olk::OlActionResponseStyle Olk::Action::GetResponseStyle ( ) {
    enum OlActionResponseStyle _result;
    HRESULT _hr = get_ResponseStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(170)
inline void Olk::Action::PutResponseStyle ( enum OlActionResponseStyle ResponseStyle ) {
    HRESULT _hr = put_ResponseStyle(ResponseStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(171)
inline enum Olk::OlActionShowOn Olk::Action::GetShowOn ( ) {
    enum OlActionShowOn _result;
    HRESULT _hr = get_ShowOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(172)
inline void Olk::Action::PutShowOn ( enum OlActionShowOn ShowOn ) {
    HRESULT _hr = put_ShowOn(ShowOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(173)
inline HRESULT Olk::Action::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(174)
inline IDispatchPtr Olk::Action::Execute ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Execute(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _Application wrapper method implementations
//

#pragma implementation_key(175)
inline Olk::_ApplicationPtr Olk::_Application::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(176)
inline enum Olk::OlObjectClass Olk::_Application::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(177)
inline Olk::_NameSpacePtr Olk::_Application::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(178)
inline IDispatchPtr Olk::_Application::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(179)
inline Office::AssistantPtr Olk::_Application::GetAssistant ( ) {
    struct Office::Assistant * _result = 0;
    HRESULT _hr = get_Assistant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AssistantPtr(_result, false);
}

#pragma implementation_key(180)
inline _bstr_t Olk::_Application::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(181)
inline _bstr_t Olk::_Application::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(182)
inline Olk::_ExplorerPtr Olk::_Application::ActiveExplorer ( ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_ActiveExplorer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

#pragma implementation_key(183)
inline Olk::_InspectorPtr Olk::_Application::ActiveInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = raw_ActiveInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(184)
inline IDispatchPtr Olk::_Application::CreateItem ( enum OlItemType ItemType ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateItem(ItemType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(185)
inline IDispatchPtr Olk::_Application::CreateItemFromTemplate ( _bstr_t TemplatePath, const _variant_t & InFolder ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateItemFromTemplate(TemplatePath, InFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(186)
inline IDispatchPtr Olk::_Application::CreateObject ( _bstr_t ObjectName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateObject(ObjectName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(187)
inline Olk::_NameSpacePtr Olk::_Application::GetNamespace ( _bstr_t Type ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = raw_GetNamespace(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(188)
inline HRESULT Olk::_Application::Quit ( ) {
    HRESULT _hr = raw_Quit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(189)
inline Office::COMAddInsPtr Olk::_Application::GetCOMAddIns ( ) {
    struct Office::COMAddIns * _result = 0;
    HRESULT _hr = get_COMAddIns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::COMAddInsPtr(_result, false);
}

#pragma implementation_key(190)
inline Olk::_ExplorersPtr Olk::_Application::GetExplorers ( ) {
    struct _Explorers * _result = 0;
    HRESULT _hr = get_Explorers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorersPtr(_result, false);
}

#pragma implementation_key(191)
inline Olk::_InspectorsPtr Olk::_Application::GetInspectors ( ) {
    struct _Inspectors * _result = 0;
    HRESULT _hr = get_Inspectors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorsPtr(_result, false);
}

#pragma implementation_key(192)
inline Office::LanguageSettingsPtr Olk::_Application::GetLanguageSettings ( ) {
    struct Office::LanguageSettings * _result = 0;
    HRESULT _hr = get_LanguageSettings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::LanguageSettingsPtr(_result, false);
}

#pragma implementation_key(193)
inline _bstr_t Olk::_Application::GetProductCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(194)
inline Office::AnswerWizardPtr Olk::_Application::GetAnswerWizard ( ) {
    struct Office::AnswerWizard * _result = 0;
    HRESULT _hr = get_AnswerWizard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::AnswerWizardPtr(_result, false);
}

#pragma implementation_key(195)
inline enum Office::MsoFeatureInstall Olk::_Application::GetFeatureInstall ( ) {
    enum Office::MsoFeatureInstall _result;
    HRESULT _hr = get_FeatureInstall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline void Olk::_Application::PutFeatureInstall ( enum Office::MsoFeatureInstall FeatureInstall ) {
    HRESULT _hr = put_FeatureInstall(FeatureInstall);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(197)
inline IDispatchPtr Olk::_Application::ActiveWindow ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ActiveWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(198)
inline IDispatchPtr Olk::_Application::OlkCopyFile ( _bstr_t FilePath, _bstr_t DestFolderPath ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_OlkCopyFile(FilePath, DestFolderPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(199)
inline Olk::SearchPtr Olk::_Application::AdvancedSearch ( _bstr_t Scope, const _variant_t & Filter, const _variant_t & SearchSubFolders, const _variant_t & Tag ) {
    struct Search * _result = 0;
    HRESULT _hr = raw_AdvancedSearch(Scope, Filter, SearchSubFolders, Tag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchPtr(_result, false);
}

#pragma implementation_key(200)
inline VARIANT_BOOL Olk::_Application::IsSearchSynchronous ( _bstr_t LookInFolders ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsSearchSynchronous(LookInFolders, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(201)
inline HRESULT Olk::_Application::GetNewNickNames ( VARIANT * pvar ) {
    HRESULT _hr = raw_GetNewNickNames(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(202)
inline Olk::_RemindersPtr Olk::_Application::GetReminders ( ) {
    struct _Reminders * _result = 0;
    HRESULT _hr = get_Reminders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _RemindersPtr(_result, false);
}

//
// interface _NameSpace wrapper method implementations
//

#pragma implementation_key(203)
inline Olk::_ApplicationPtr Olk::_NameSpace::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(204)
inline enum Olk::OlObjectClass Olk::_NameSpace::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline Olk::_NameSpacePtr Olk::_NameSpace::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(206)
inline IDispatchPtr Olk::_NameSpace::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(207)
inline Olk::RecipientPtr Olk::_NameSpace::GetCurrentUser ( ) {
    struct Recipient * _result = 0;
    HRESULT _hr = get_CurrentUser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(208)
inline Olk::_FoldersPtr Olk::_NameSpace::GetFolders ( ) {
    struct _Folders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FoldersPtr(_result, false);
}

#pragma implementation_key(209)
inline _bstr_t Olk::_NameSpace::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(210)
inline Olk::AddressListsPtr Olk::_NameSpace::GetAddressLists ( ) {
    struct AddressLists * _result = 0;
    HRESULT _hr = get_AddressLists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListsPtr(_result, false);
}

#pragma implementation_key(211)
inline Olk::RecipientPtr Olk::_NameSpace::CreateRecipient ( _bstr_t RecipientName ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_CreateRecipient(RecipientName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(212)
inline Olk::MAPIFolderPtr Olk::_NameSpace::GetDefaultFolder ( enum OlDefaultFolders FolderType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetDefaultFolder(FolderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(213)
inline Olk::MAPIFolderPtr Olk::_NameSpace::GetFolderFromID ( _bstr_t EntryIDFolder, const _variant_t & EntryIDStore ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetFolderFromID(EntryIDFolder, EntryIDStore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(214)
inline IDispatchPtr Olk::_NameSpace::GetItemFromID ( _bstr_t EntryIDItem, const _variant_t & EntryIDStore ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetItemFromID(EntryIDItem, EntryIDStore, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(215)
inline Olk::RecipientPtr Olk::_NameSpace::GetRecipientFromID ( _bstr_t EntryID ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_GetRecipientFromID(EntryID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(216)
inline Olk::MAPIFolderPtr Olk::_NameSpace::GetSharedDefaultFolder ( struct Recipient * Recipient, enum OlDefaultFolders FolderType ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetSharedDefaultFolder(Recipient, FolderType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(217)
inline HRESULT Olk::_NameSpace::Logoff ( ) {
    HRESULT _hr = raw_Logoff();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(218)
inline HRESULT Olk::_NameSpace::Logon ( const _variant_t & Profile, const _variant_t & Password, const _variant_t & ShowDialog, const _variant_t & NewSession ) {
    HRESULT _hr = raw_Logon(Profile, Password, ShowDialog, NewSession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(219)
inline Olk::MAPIFolderPtr Olk::_NameSpace::PickFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_PickFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(220)
inline HRESULT Olk::_NameSpace::RefreshRemoteHeaders ( ) {
    HRESULT _hr = raw_RefreshRemoteHeaders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(221)
inline Olk::SyncObjectsPtr Olk::_NameSpace::GetSyncObjects ( ) {
    struct SyncObjects * _result = 0;
    HRESULT _hr = get_SyncObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SyncObjectsPtr(_result, false);
}

#pragma implementation_key(222)
inline HRESULT Olk::_NameSpace::AddStore ( const _variant_t & Store ) {
    HRESULT _hr = raw_AddStore(Store);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(223)
inline HRESULT Olk::_NameSpace::RemoveStore ( struct MAPIFolder * Folder ) {
    HRESULT _hr = raw_RemoveStore(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(224)
inline VARIANT_BOOL Olk::_NameSpace::GetOffline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Offline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(225)
inline HRESULT Olk::_NameSpace::Dial ( const _variant_t & ContactItem ) {
    HRESULT _hr = raw_Dial(ContactItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(226)
inline IUnknownPtr Olk::_NameSpace::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(227)
inline enum Olk::OlExchangeConnectionMode Olk::_NameSpace::GetExchangeConnectionMode ( ) {
    enum OlExchangeConnectionMode _result;
    HRESULT _hr = get_ExchangeConnectionMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(228)
inline HRESULT Olk::_NameSpace::AddStoreEx ( const _variant_t & Store, enum OlStoreType Type ) {
    HRESULT _hr = raw_AddStoreEx(Store, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Items wrapper method implementations
//

#pragma implementation_key(229)
inline Olk::_ApplicationPtr Olk::_Items::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(230)
inline enum Olk::OlObjectClass Olk::_Items::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(231)
inline Olk::_NameSpacePtr Olk::_Items::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(232)
inline IDispatchPtr Olk::_Items::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(233)
inline long Olk::_Items::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(234)
inline IDispatchPtr Olk::_Items::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(235)
inline IUnknownPtr Olk::_Items::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(236)
inline VARIANT_BOOL Olk::_Items::GetIncludeRecurrences ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeRecurrences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(237)
inline void Olk::_Items::PutIncludeRecurrences ( VARIANT_BOOL IncludeRecurrences ) {
    HRESULT _hr = put_IncludeRecurrences(IncludeRecurrences);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(238)
inline IDispatchPtr Olk::_Items::Add ( const _variant_t & Type ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(239)
inline IDispatchPtr Olk::_Items::Find ( _bstr_t Filter ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Find(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(240)
inline IDispatchPtr Olk::_Items::FindNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FindNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(241)
inline IDispatchPtr Olk::_Items::GetFirst ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(242)
inline IDispatchPtr Olk::_Items::GetLast ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(243)
inline IDispatchPtr Olk::_Items::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(244)
inline IDispatchPtr Olk::_Items::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(245)
inline HRESULT Olk::_Items::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(246)
inline HRESULT Olk::_Items::ResetColumns ( ) {
    HRESULT _hr = raw_ResetColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(247)
inline Olk::_ItemsPtr Olk::_Items::Restrict ( _bstr_t Filter ) {
    struct _Items * _result = 0;
    HRESULT _hr = raw_Restrict(Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ItemsPtr(_result, false);
}

#pragma implementation_key(248)
inline HRESULT Olk::_Items::SetColumns ( _bstr_t Columns ) {
    HRESULT _hr = raw_SetColumns(Columns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(249)
inline HRESULT Olk::_Items::Sort ( _bstr_t Property, const _variant_t & Descending ) {
    HRESULT _hr = raw_Sort(Property, Descending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Panes wrapper method implementations
//

#pragma implementation_key(250)
inline Olk::_ApplicationPtr Olk::Panes::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(251)
inline enum Olk::OlObjectClass Olk::Panes::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(252)
inline Olk::_NameSpacePtr Olk::Panes::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(253)
inline IDispatchPtr Olk::Panes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(254)
inline long Olk::Panes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline IDispatchPtr Olk::Panes::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Selection wrapper method implementations
//

#pragma implementation_key(256)
inline Olk::_ApplicationPtr Olk::Selection::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(257)
inline enum Olk::OlObjectClass Olk::Selection::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(258)
inline Olk::_NameSpacePtr Olk::Selection::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(259)
inline IDispatchPtr Olk::Selection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(260)
inline long Olk::Selection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline IDispatchPtr Olk::Selection::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface View wrapper method implementations
//

#pragma implementation_key(262)
inline Olk::_ApplicationPtr Olk::View::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(263)
inline enum Olk::OlObjectClass Olk::View::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(264)
inline Olk::_NameSpacePtr Olk::View::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(265)
inline IDispatchPtr Olk::View::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(266)
inline HRESULT Olk::View::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(267)
inline Olk::ViewPtr Olk::View::Copy ( _bstr_t Name, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Copy(Name, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(268)
inline HRESULT Olk::View::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(269)
inline HRESULT Olk::View::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(270)
inline HRESULT Olk::View::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(271)
inline _bstr_t Olk::View::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(272)
inline void Olk::View::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline VARIANT_BOOL Olk::View::GetLockUserChanges ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LockUserChanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline void Olk::View::PutLockUserChanges ( VARIANT_BOOL LockUserChanges ) {
    HRESULT _hr = put_LockUserChanges(LockUserChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline _bstr_t Olk::View::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(276)
inline void Olk::View::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline enum Olk::OlViewSaveOption Olk::View::GetSaveOption ( ) {
    enum OlViewSaveOption _result;
    HRESULT _hr = get_SaveOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(278)
inline VARIANT_BOOL Olk::View::GetStandard ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Standard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline enum Olk::OlViewType Olk::View::GetViewType ( ) {
    enum OlViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(280)
inline _bstr_t Olk::View::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(281)
inline void Olk::View::PutXML ( _bstr_t XML ) {
    HRESULT _hr = put_XML(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(282)
inline HRESULT Olk::View::GoToDate ( DATE Date ) {
    HRESULT _hr = raw_GoToDate(Date);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Views wrapper method implementations
//

#pragma implementation_key(283)
inline Olk::_ApplicationPtr Olk::_Views::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(284)
inline enum Olk::OlObjectClass Olk::_Views::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(285)
inline Olk::_NameSpacePtr Olk::_Views::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(286)
inline IDispatchPtr Olk::_Views::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(287)
inline long Olk::_Views::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline Olk::ViewPtr Olk::_Views::Item ( const _variant_t & Index ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(289)
inline Olk::ViewPtr Olk::_Views::Add ( _bstr_t Name, enum OlViewType ViewType, enum OlViewSaveOption SaveOption ) {
    struct View * _result = 0;
    HRESULT _hr = raw_Add(Name, ViewType, SaveOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(290)
inline HRESULT Olk::_Views::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(291)
inline IUnknownPtr Olk::_Views::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _SyncObject wrapper method implementations
//

#pragma implementation_key(292)
inline Olk::_ApplicationPtr Olk::_SyncObject::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(293)
inline enum Olk::OlObjectClass Olk::_SyncObject::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline Olk::_NameSpacePtr Olk::_SyncObject::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(295)
inline IDispatchPtr Olk::_SyncObject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(296)
inline _bstr_t Olk::_SyncObject::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(297)
inline HRESULT Olk::_SyncObject::Start ( ) {
    HRESULT _hr = raw_Start();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(298)
inline HRESULT Olk::_SyncObject::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SyncObjects wrapper method implementations
//

#pragma implementation_key(299)
inline Olk::_ApplicationPtr Olk::SyncObjects::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(300)
inline enum Olk::OlObjectClass Olk::SyncObjects::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(301)
inline Olk::_NameSpacePtr Olk::SyncObjects::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(302)
inline IDispatchPtr Olk::SyncObjects::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(303)
inline long Olk::SyncObjects::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline Olk::_SyncObjectPtr Olk::SyncObjects::Item ( const _variant_t & Index ) {
    struct _SyncObject * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SyncObjectPtr(_result, false);
}

#pragma implementation_key(305)
inline Olk::_SyncObjectPtr Olk::SyncObjects::GetAppFolders ( ) {
    struct _SyncObject * _result = 0;
    HRESULT _hr = get_AppFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _SyncObjectPtr(_result, false);
}

//
// interface _Inspector wrapper method implementations
//

#pragma implementation_key(306)
inline Olk::_ApplicationPtr Olk::_Inspector::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(307)
inline enum Olk::OlObjectClass Olk::_Inspector::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline Olk::_NameSpacePtr Olk::_Inspector::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(309)
inline IDispatchPtr Olk::_Inspector::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(310)
inline Office::_CommandBarsPtr Olk::_Inspector::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(311)
inline IDispatchPtr Olk::_Inspector::GetCurrentItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CurrentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(312)
inline enum Olk::OlEditorType Olk::_Inspector::GetEditorType ( ) {
    enum OlEditorType _result;
    HRESULT _hr = get_EditorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(313)
inline IDispatchPtr Olk::_Inspector::GetModifiedFormPages ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ModifiedFormPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(314)
inline HRESULT Olk::_Inspector::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(315)
inline HRESULT Olk::_Inspector::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(316)
inline HRESULT Olk::_Inspector::HideFormPage ( _bstr_t PageName ) {
    HRESULT _hr = raw_HideFormPage(PageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(317)
inline VARIANT_BOOL Olk::_Inspector::IsWordMail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsWordMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline HRESULT Olk::_Inspector::SetCurrentFormPage ( _bstr_t PageName ) {
    HRESULT _hr = raw_SetCurrentFormPage(PageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(319)
inline HRESULT Olk::_Inspector::ShowFormPage ( _bstr_t PageName ) {
    HRESULT _hr = raw_ShowFormPage(PageName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(320)
inline IDispatchPtr Olk::_Inspector::GetHTMLEditor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_HTMLEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(321)
inline IDispatchPtr Olk::_Inspector::GetWordEditor ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_WordEditor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(322)
inline _bstr_t Olk::_Inspector::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(323)
inline long Olk::_Inspector::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline void Olk::_Inspector::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline long Olk::_Inspector::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(326)
inline void Olk::_Inspector::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline long Olk::_Inspector::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(328)
inline void Olk::_Inspector::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline long Olk::_Inspector::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(330)
inline void Olk::_Inspector::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(331)
inline enum Olk::OlWindowState Olk::_Inspector::GetWindowState ( ) {
    enum OlWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline void Olk::_Inspector::PutWindowState ( enum OlWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline HRESULT Olk::_Inspector::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(334)
inline HRESULT Olk::_Inspector::SetControlItemProperty ( IDispatch * Control, _bstr_t PropertyName ) {
    HRESULT _hr = raw_SetControlItemProperty(Control, PropertyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _Inspectors wrapper method implementations
//

#pragma implementation_key(335)
inline Olk::_ApplicationPtr Olk::_Inspectors::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(336)
inline enum Olk::OlObjectClass Olk::_Inspectors::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(337)
inline Olk::_NameSpacePtr Olk::_Inspectors::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(338)
inline IDispatchPtr Olk::_Inspectors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(339)
inline long Olk::_Inspectors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline Olk::_InspectorPtr Olk::_Inspectors::Item ( const _variant_t & Index ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(341)
inline Olk::_InspectorPtr Olk::_Inspectors::Add ( IDispatch * Item ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = raw_Add(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

//
// interface _Results wrapper method implementations
//

#pragma implementation_key(342)
inline Olk::_ApplicationPtr Olk::_Results::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(343)
inline enum Olk::OlObjectClass Olk::_Results::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(344)
inline Olk::_NameSpacePtr Olk::_Results::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(345)
inline IDispatchPtr Olk::_Results::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(346)
inline long Olk::_Results::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(347)
inline IDispatchPtr Olk::_Results::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(348)
inline IUnknownPtr Olk::_Results::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(349)
inline IDispatchPtr Olk::_Results::GetFirst ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(350)
inline IDispatchPtr Olk::_Results::GetLast ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(351)
inline IDispatchPtr Olk::_Results::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(352)
inline IDispatchPtr Olk::_Results::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(353)
inline HRESULT Olk::_Results::ResetColumns ( ) {
    HRESULT _hr = raw_ResetColumns();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(354)
inline HRESULT Olk::_Results::SetColumns ( _bstr_t Columns ) {
    HRESULT _hr = raw_SetColumns(Columns);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(355)
inline HRESULT Olk::_Results::Sort ( _bstr_t Property, const _variant_t & Descending ) {
    HRESULT _hr = raw_Sort(Property, Descending);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(356)
inline enum Olk::OlItemType Olk::_Results::GetDefaultItemType ( ) {
    enum OlItemType _result;
    HRESULT _hr = get_DefaultItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(357)
inline void Olk::_Results::PutDefaultItemType ( enum OlItemType DefaultItemType ) {
    HRESULT _hr = put_DefaultItemType(DefaultItemType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Reminder wrapper method implementations
//

#pragma implementation_key(358)
inline Olk::_ApplicationPtr Olk::_Reminder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(359)
inline enum Olk::OlObjectClass Olk::_Reminder::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(360)
inline Olk::_NameSpacePtr Olk::_Reminder::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(361)
inline IDispatchPtr Olk::_Reminder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(362)
inline HRESULT Olk::_Reminder::Dismiss ( ) {
    HRESULT _hr = raw_Dismiss();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(363)
inline HRESULT Olk::_Reminder::Snooze ( const _variant_t & SnoozeTime ) {
    HRESULT _hr = raw_Snooze(SnoozeTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(364)
inline _bstr_t Olk::_Reminder::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(365)
inline VARIANT_BOOL Olk::_Reminder::GetIsVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVisible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(366)
inline IDispatchPtr Olk::_Reminder::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(367)
inline DATE Olk::_Reminder::GetNextReminderDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_NextReminderDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(368)
inline DATE Olk::_Reminder::GetOriginalReminderDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_OriginalReminderDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Reminders wrapper method implementations
//

#pragma implementation_key(369)
inline Olk::_ApplicationPtr Olk::_Reminders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(370)
inline enum Olk::OlObjectClass Olk::_Reminders::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline Olk::_NameSpacePtr Olk::_Reminders::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(372)
inline IDispatchPtr Olk::_Reminders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(373)
inline long Olk::_Reminders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline Olk::_ReminderPtr Olk::_Reminders::Item ( const _variant_t & Index ) {
    struct _Reminder * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ReminderPtr(_result, false);
}

#pragma implementation_key(375)
inline HRESULT Olk::_Reminders::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(376)
inline IUnknownPtr Olk::_Reminders::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface Actions wrapper method implementations
//

#pragma implementation_key(377)
inline Olk::_ApplicationPtr Olk::Actions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(378)
inline enum Olk::OlObjectClass Olk::Actions::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(379)
inline Olk::_NameSpacePtr Olk::Actions::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(380)
inline IDispatchPtr Olk::Actions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(381)
inline long Olk::Actions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline Olk::ActionPtr Olk::Actions::Item ( const _variant_t & Index ) {
    struct Action * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionPtr(_result, false);
}

#pragma implementation_key(383)
inline Olk::ActionPtr Olk::Actions::Add ( ) {
    struct Action * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionPtr(_result, false);
}

#pragma implementation_key(384)
inline HRESULT Olk::Actions::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface PropertyPages wrapper method implementations
//

#pragma implementation_key(385)
inline Olk::_ApplicationPtr Olk::PropertyPages::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(386)
inline enum Olk::OlObjectClass Olk::PropertyPages::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(387)
inline Olk::_NameSpacePtr Olk::PropertyPages::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(388)
inline IDispatchPtr Olk::PropertyPages::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(389)
inline long Olk::PropertyPages::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(390)
inline IDispatchPtr Olk::PropertyPages::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(391)
inline HRESULT Olk::PropertyPages::Add ( const _variant_t & Page, _bstr_t Title ) {
    HRESULT _hr = raw_Add(Page, Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(392)
inline HRESULT Olk::PropertyPages::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Attachment wrapper method implementations
//

#pragma implementation_key(393)
inline Olk::_ApplicationPtr Olk::Attachment::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(394)
inline enum Olk::OlObjectClass Olk::Attachment::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline Olk::_NameSpacePtr Olk::Attachment::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(396)
inline IDispatchPtr Olk::Attachment::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(397)
inline _bstr_t Olk::Attachment::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(398)
inline void Olk::Attachment::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(399)
inline _bstr_t Olk::Attachment::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(400)
inline long Olk::Attachment::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline IUnknownPtr Olk::Attachment::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(402)
inline _bstr_t Olk::Attachment::GetPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(403)
inline long Olk::Attachment::GetPosition ( ) {
    long _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(404)
inline void Olk::Attachment::PutPosition ( long Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(405)
inline enum Olk::OlAttachmentType Olk::Attachment::GetType ( ) {
    enum OlAttachmentType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(406)
inline HRESULT Olk::Attachment::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(407)
inline HRESULT Olk::Attachment::SaveAsFile ( _bstr_t Path ) {
    HRESULT _hr = raw_SaveAsFile(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Attachments wrapper method implementations
//

#pragma implementation_key(408)
inline Olk::_ApplicationPtr Olk::Attachments::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(409)
inline enum Olk::OlObjectClass Olk::Attachments::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(410)
inline Olk::_NameSpacePtr Olk::Attachments::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(411)
inline IDispatchPtr Olk::Attachments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(412)
inline long Olk::Attachments::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline Olk::AttachmentPtr Olk::Attachments::Item ( const _variant_t & Index ) {
    struct Attachment * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentPtr(_result, false);
}

#pragma implementation_key(414)
inline Olk::AttachmentPtr Olk::Attachments::Add ( const _variant_t & Source, const _variant_t & Type, const _variant_t & Position, const _variant_t & DisplayName ) {
    struct Attachment * _result = 0;
    HRESULT _hr = raw_Add(Source, Type, Position, DisplayName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentPtr(_result, false);
}

#pragma implementation_key(415)
inline HRESULT Olk::Attachments::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FormDescription wrapper method implementations
//

#pragma implementation_key(416)
inline Olk::_ApplicationPtr Olk::FormDescription::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(417)
inline enum Olk::OlObjectClass Olk::FormDescription::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(418)
inline Olk::_NameSpacePtr Olk::FormDescription::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(419)
inline IDispatchPtr Olk::FormDescription::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(420)
inline _bstr_t Olk::FormDescription::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(421)
inline void Olk::FormDescription::PutCategory ( _bstr_t Category ) {
    HRESULT _hr = put_Category(Category);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(422)
inline _bstr_t Olk::FormDescription::GetCategorySub ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CategorySub(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(423)
inline void Olk::FormDescription::PutCategorySub ( _bstr_t CategorySub ) {
    HRESULT _hr = put_CategorySub(CategorySub);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(424)
inline _bstr_t Olk::FormDescription::GetComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(425)
inline void Olk::FormDescription::PutComment ( _bstr_t Comment ) {
    HRESULT _hr = put_Comment(Comment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(426)
inline _bstr_t Olk::FormDescription::GetContactName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContactName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(427)
inline void Olk::FormDescription::PutContactName ( _bstr_t ContactName ) {
    HRESULT _hr = put_ContactName(ContactName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(428)
inline _bstr_t Olk::FormDescription::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(429)
inline void Olk::FormDescription::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline VARIANT_BOOL Olk::FormDescription::GetHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void Olk::FormDescription::PutHidden ( VARIANT_BOOL Hidden ) {
    HRESULT _hr = put_Hidden(Hidden);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline _bstr_t Olk::FormDescription::GetIcon ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(433)
inline void Olk::FormDescription::PutIcon ( _bstr_t Icon ) {
    HRESULT _hr = put_Icon(Icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(434)
inline VARIANT_BOOL Olk::FormDescription::GetLocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Locked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline void Olk::FormDescription::PutLocked ( VARIANT_BOOL Locked ) {
    HRESULT _hr = put_Locked(Locked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline _bstr_t Olk::FormDescription::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(437)
inline _bstr_t Olk::FormDescription::GetMiniIcon ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiniIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(438)
inline void Olk::FormDescription::PutMiniIcon ( _bstr_t MiniIcon ) {
    HRESULT _hr = put_MiniIcon(MiniIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline _bstr_t Olk::FormDescription::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(440)
inline void Olk::FormDescription::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(441)
inline _bstr_t Olk::FormDescription::GetNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(442)
inline void Olk::FormDescription::PutNumber ( _bstr_t Number ) {
    HRESULT _hr = put_Number(Number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(443)
inline VARIANT_BOOL Olk::FormDescription::GetOneOff ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OneOff(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(444)
inline void Olk::FormDescription::PutOneOff ( VARIANT_BOOL OneOff ) {
    HRESULT _hr = put_OneOff(OneOff);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(445)
inline _bstr_t Olk::FormDescription::GetPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Password(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(446)
inline void Olk::FormDescription::PutPassword ( _bstr_t Password ) {
    HRESULT _hr = put_Password(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(447)
inline _bstr_t Olk::FormDescription::GetScriptText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScriptText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(448)
inline _bstr_t Olk::FormDescription::GetTemplate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Template(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(449)
inline void Olk::FormDescription::PutTemplate ( _bstr_t Template ) {
    HRESULT _hr = put_Template(Template);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline VARIANT_BOOL Olk::FormDescription::GetUseWordMail ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseWordMail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(451)
inline void Olk::FormDescription::PutUseWordMail ( VARIANT_BOOL UseWordMail ) {
    HRESULT _hr = put_UseWordMail(UseWordMail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline _bstr_t Olk::FormDescription::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(453)
inline void Olk::FormDescription::PutVersion ( _bstr_t Version ) {
    HRESULT _hr = put_Version(Version);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(454)
inline HRESULT Olk::FormDescription::PublishForm ( enum OlFormRegistry Registry, const _variant_t & Folder ) {
    HRESULT _hr = raw_PublishForm(Registry, Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface UserProperty wrapper method implementations
//

#pragma implementation_key(455)
inline Olk::_ApplicationPtr Olk::UserProperty::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(456)
inline enum Olk::OlObjectClass Olk::UserProperty::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(457)
inline Olk::_NameSpacePtr Olk::UserProperty::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(458)
inline IDispatchPtr Olk::UserProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(459)
inline _bstr_t Olk::UserProperty::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(460)
inline void Olk::UserProperty::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(461)
inline _bstr_t Olk::UserProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(462)
inline enum Olk::OlUserPropertyType Olk::UserProperty::GetType ( ) {
    enum OlUserPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(463)
inline _bstr_t Olk::UserProperty::GetValidationFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(464)
inline void Olk::UserProperty::PutValidationFormula ( _bstr_t ValidationFormula ) {
    HRESULT _hr = put_ValidationFormula(ValidationFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(465)
inline _bstr_t Olk::UserProperty::GetValidationText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(466)
inline void Olk::UserProperty::PutValidationText ( _bstr_t ValidationText ) {
    HRESULT _hr = put_ValidationText(ValidationText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(467)
inline _variant_t Olk::UserProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(468)
inline void Olk::UserProperty::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(469)
inline HRESULT Olk::UserProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(470)
inline VARIANT_BOOL Olk::UserProperty::GetIsUserProperty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface UserProperties wrapper method implementations
//

#pragma implementation_key(471)
inline Olk::_ApplicationPtr Olk::UserProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(472)
inline enum Olk::OlObjectClass Olk::UserProperties::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline Olk::_NameSpacePtr Olk::UserProperties::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(474)
inline IDispatchPtr Olk::UserProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(475)
inline long Olk::UserProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(476)
inline Olk::UserPropertyPtr Olk::UserProperties::Item ( const _variant_t & Index ) {
    struct UserProperty * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertyPtr(_result, false);
}

#pragma implementation_key(477)
inline Olk::UserPropertyPtr Olk::UserProperties::Add ( _bstr_t Name, enum OlUserPropertyType Type, const _variant_t & AddToFolderFields, const _variant_t & DisplayFormat ) {
    struct UserProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, AddToFolderFields, DisplayFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertyPtr(_result, false);
}

#pragma implementation_key(478)
inline Olk::UserPropertyPtr Olk::UserProperties::Find ( _bstr_t Name, const _variant_t & Custom ) {
    struct UserProperty * _result = 0;
    HRESULT _hr = raw_Find(Name, Custom, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertyPtr(_result, false);
}

#pragma implementation_key(479)
inline HRESULT Olk::UserProperties::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Link wrapper method implementations
//

#pragma implementation_key(480)
inline Olk::_ApplicationPtr Olk::Link::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(481)
inline enum Olk::OlObjectClass Olk::Link::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(482)
inline Olk::_NameSpacePtr Olk::Link::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(483)
inline IDispatchPtr Olk::Link::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(484)
inline _bstr_t Olk::Link::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(485)
inline enum Olk::OlObjectClass Olk::Link::GetType ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(486)
inline IDispatchPtr Olk::Link::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Links wrapper method implementations
//

#pragma implementation_key(487)
inline Olk::_ApplicationPtr Olk::Links::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(488)
inline enum Olk::OlObjectClass Olk::Links::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(489)
inline Olk::_NameSpacePtr Olk::Links::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(490)
inline IDispatchPtr Olk::Links::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(491)
inline long Olk::Links::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(492)
inline Olk::LinkPtr Olk::Links::Item ( const _variant_t & Index ) {
    struct Link * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkPtr(_result, false);
}

#pragma implementation_key(493)
inline Olk::LinkPtr Olk::Links::Add ( IDispatch * Item ) {
    struct Link * _result = 0;
    HRESULT _hr = raw_Add(Item, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinkPtr(_result, false);
}

#pragma implementation_key(494)
inline HRESULT Olk::Links::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ItemProperty wrapper method implementations
//

#pragma implementation_key(495)
inline Olk::_ApplicationPtr Olk::ItemProperty::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(496)
inline enum Olk::OlObjectClass Olk::ItemProperty::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline Olk::_NameSpacePtr Olk::ItemProperty::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(498)
inline IDispatchPtr Olk::ItemProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(499)
inline _bstr_t Olk::ItemProperty::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(500)
inline void Olk::ItemProperty::PutFormula ( _bstr_t Formula ) {
    HRESULT _hr = put_Formula(Formula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(501)
inline _bstr_t Olk::ItemProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(502)
inline enum Olk::OlUserPropertyType Olk::ItemProperty::GetType ( ) {
    enum OlUserPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline _bstr_t Olk::ItemProperty::GetValidationFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(504)
inline void Olk::ItemProperty::PutValidationFormula ( _bstr_t ValidationFormula ) {
    HRESULT _hr = put_ValidationFormula(ValidationFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(505)
inline _bstr_t Olk::ItemProperty::GetValidationText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(506)
inline void Olk::ItemProperty::PutValidationText ( _bstr_t ValidationText ) {
    HRESULT _hr = put_ValidationText(ValidationText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(507)
inline _variant_t Olk::ItemProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(508)
inline void Olk::ItemProperty::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(509)
inline HRESULT Olk::ItemProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(510)
inline VARIANT_BOOL Olk::ItemProperty::GetIsUserProperty ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ItemProperties wrapper method implementations
//

#pragma implementation_key(511)
inline Olk::_ApplicationPtr Olk::ItemProperties::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(512)
inline enum Olk::OlObjectClass Olk::ItemProperties::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline Olk::_NameSpacePtr Olk::ItemProperties::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(514)
inline IDispatchPtr Olk::ItemProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(515)
inline long Olk::ItemProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(516)
inline Olk::ItemPropertyPtr Olk::ItemProperties::Item ( const _variant_t & Index ) {
    struct ItemProperty * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertyPtr(_result, false);
}

#pragma implementation_key(517)
inline IUnknownPtr Olk::ItemProperties::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(518)
inline Olk::ItemPropertyPtr Olk::ItemProperties::Add ( _bstr_t Name, enum OlUserPropertyType Type, const _variant_t & AddToFolderFields, const _variant_t & DisplayFormat ) {
    struct ItemProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, AddToFolderFields, DisplayFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertyPtr(_result, false);
}

#pragma implementation_key(519)
inline HRESULT Olk::ItemProperties::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Conflict wrapper method implementations
//

#pragma implementation_key(520)
inline Olk::_ApplicationPtr Olk::Conflict::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(521)
inline enum Olk::OlObjectClass Olk::Conflict::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(522)
inline Olk::_NameSpacePtr Olk::Conflict::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(523)
inline IDispatchPtr Olk::Conflict::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(524)
inline IDispatchPtr Olk::Conflict::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(525)
inline _bstr_t Olk::Conflict::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(526)
inline enum Olk::OlObjectClass Olk::Conflict::GetType ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Conflicts wrapper method implementations
//

#pragma implementation_key(527)
inline Olk::_ApplicationPtr Olk::Conflicts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(528)
inline enum Olk::OlObjectClass Olk::Conflicts::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(529)
inline Olk::_NameSpacePtr Olk::Conflicts::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(530)
inline IDispatchPtr Olk::Conflicts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(531)
inline long Olk::Conflicts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(532)
inline Olk::ConflictPtr Olk::Conflicts::Item ( const _variant_t & Index ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(533)
inline Olk::ConflictPtr Olk::Conflicts::GetFirst ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(534)
inline Olk::ConflictPtr Olk::Conflicts::GetLast ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(535)
inline Olk::ConflictPtr Olk::Conflicts::GetNext ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

#pragma implementation_key(536)
inline Olk::ConflictPtr Olk::Conflicts::GetPrevious ( ) {
    struct Conflict * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictPtr(_result, false);
}

//
// interface Exception wrapper method implementations
//

#pragma implementation_key(537)
inline Olk::_ApplicationPtr Olk::Exception::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(538)
inline enum Olk::OlObjectClass Olk::Exception::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline Olk::_NameSpacePtr Olk::Exception::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(540)
inline IDispatchPtr Olk::Exception::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(541)
inline Olk::_AppointmentItemPtr Olk::Exception::GetAppointmentItem ( ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = get_AppointmentItem(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

#pragma implementation_key(542)
inline VARIANT_BOOL Olk::Exception::GetDeleted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Deleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline DATE Olk::Exception::GetOriginalDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_OriginalDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(544)
inline Olk::ItemPropertiesPtr Olk::Exception::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

//
// interface Exceptions wrapper method implementations
//

#pragma implementation_key(545)
inline Olk::_ApplicationPtr Olk::Exceptions::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(546)
inline enum Olk::OlObjectClass Olk::Exceptions::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(547)
inline Olk::_NameSpacePtr Olk::Exceptions::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(548)
inline IDispatchPtr Olk::Exceptions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(549)
inline long Olk::Exceptions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(550)
inline Olk::ExceptionPtr Olk::Exceptions::Item ( const _variant_t & Index ) {
    struct Exception * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExceptionPtr(_result, false);
}

//
// interface RecurrencePattern wrapper method implementations
//

#pragma implementation_key(551)
inline Olk::_ApplicationPtr Olk::RecurrencePattern::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(552)
inline enum Olk::OlObjectClass Olk::RecurrencePattern::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(553)
inline Olk::_NameSpacePtr Olk::RecurrencePattern::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(554)
inline IDispatchPtr Olk::RecurrencePattern::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(555)
inline long Olk::RecurrencePattern::GetDayOfMonth ( ) {
    long _result = 0;
    HRESULT _hr = get_DayOfMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(556)
inline void Olk::RecurrencePattern::PutDayOfMonth ( long DayOfMonth ) {
    HRESULT _hr = put_DayOfMonth(DayOfMonth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(557)
inline enum Olk::OlDaysOfWeek Olk::RecurrencePattern::GetDayOfWeekMask ( ) {
    enum OlDaysOfWeek _result;
    HRESULT _hr = get_DayOfWeekMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline void Olk::RecurrencePattern::PutDayOfWeekMask ( enum OlDaysOfWeek DayOfWeekMask ) {
    HRESULT _hr = put_DayOfWeekMask(DayOfWeekMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(559)
inline long Olk::RecurrencePattern::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void Olk::RecurrencePattern::PutDuration ( long Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline DATE Olk::RecurrencePattern::GetEndTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_EndTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void Olk::RecurrencePattern::PutEndTime ( DATE EndTime ) {
    HRESULT _hr = put_EndTime(EndTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline Olk::ExceptionsPtr Olk::RecurrencePattern::GetExceptions ( ) {
    struct Exceptions * _result = 0;
    HRESULT _hr = get_Exceptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ExceptionsPtr(_result, false);
}

#pragma implementation_key(564)
inline long Olk::RecurrencePattern::GetInstance ( ) {
    long _result = 0;
    HRESULT _hr = get_Instance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(565)
inline void Olk::RecurrencePattern::PutInstance ( long Instance ) {
    HRESULT _hr = put_Instance(Instance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(566)
inline long Olk::RecurrencePattern::GetInterval ( ) {
    long _result = 0;
    HRESULT _hr = get_Interval(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(567)
inline void Olk::RecurrencePattern::PutInterval ( long Interval ) {
    HRESULT _hr = put_Interval(Interval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(568)
inline long Olk::RecurrencePattern::GetMonthOfYear ( ) {
    long _result = 0;
    HRESULT _hr = get_MonthOfYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(569)
inline void Olk::RecurrencePattern::PutMonthOfYear ( long MonthOfYear ) {
    HRESULT _hr = put_MonthOfYear(MonthOfYear);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(570)
inline VARIANT_BOOL Olk::RecurrencePattern::GetNoEndDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoEndDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(571)
inline void Olk::RecurrencePattern::PutNoEndDate ( VARIANT_BOOL NoEndDate ) {
    HRESULT _hr = put_NoEndDate(NoEndDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(572)
inline long Olk::RecurrencePattern::GetOccurrences ( ) {
    long _result = 0;
    HRESULT _hr = get_Occurrences(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline void Olk::RecurrencePattern::PutOccurrences ( long Occurrences ) {
    HRESULT _hr = put_Occurrences(Occurrences);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(574)
inline DATE Olk::RecurrencePattern::GetPatternEndDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_PatternEndDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(575)
inline void Olk::RecurrencePattern::PutPatternEndDate ( DATE PatternEndDate ) {
    HRESULT _hr = put_PatternEndDate(PatternEndDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(576)
inline DATE Olk::RecurrencePattern::GetPatternStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_PatternStartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(577)
inline void Olk::RecurrencePattern::PutPatternStartDate ( DATE PatternStartDate ) {
    HRESULT _hr = put_PatternStartDate(PatternStartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(578)
inline enum Olk::OlRecurrenceType Olk::RecurrencePattern::GetRecurrenceType ( ) {
    enum OlRecurrenceType _result;
    HRESULT _hr = get_RecurrenceType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(579)
inline void Olk::RecurrencePattern::PutRecurrenceType ( enum OlRecurrenceType RecurrenceType ) {
    HRESULT _hr = put_RecurrenceType(RecurrenceType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(580)
inline VARIANT_BOOL Olk::RecurrencePattern::GetRegenerate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Regenerate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(581)
inline void Olk::RecurrencePattern::PutRegenerate ( VARIANT_BOOL Regenerate ) {
    HRESULT _hr = put_Regenerate(Regenerate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline DATE Olk::RecurrencePattern::GetStartTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline void Olk::RecurrencePattern::PutStartTime ( DATE StartTime ) {
    HRESULT _hr = put_StartTime(StartTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(584)
inline Olk::_AppointmentItemPtr Olk::RecurrencePattern::GetOccurrence ( DATE StartDate ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = raw_GetOccurrence(StartDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

//
// interface OutlookBarShortcut wrapper method implementations
//

#pragma implementation_key(585)
inline Olk::_ApplicationPtr Olk::OutlookBarShortcut::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(586)
inline enum Olk::OlObjectClass Olk::OutlookBarShortcut::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(587)
inline Olk::_NameSpacePtr Olk::OutlookBarShortcut::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(588)
inline IDispatchPtr Olk::OutlookBarShortcut::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(589)
inline _bstr_t Olk::OutlookBarShortcut::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(590)
inline void Olk::OutlookBarShortcut::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline _variant_t Olk::OutlookBarShortcut::GetTarget ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Target(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(592)
inline HRESULT Olk::OutlookBarShortcut::SetIcon ( const _variant_t & Icon ) {
    HRESULT _hr = raw_SetIcon(Icon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _OutlookBarShortcuts wrapper method implementations
//

#pragma implementation_key(593)
inline Olk::_ApplicationPtr Olk::_OutlookBarShortcuts::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(594)
inline enum Olk::OlObjectClass Olk::_OutlookBarShortcuts::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(595)
inline Olk::_NameSpacePtr Olk::_OutlookBarShortcuts::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(596)
inline IDispatchPtr Olk::_OutlookBarShortcuts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(597)
inline long Olk::_OutlookBarShortcuts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline Olk::OutlookBarShortcutPtr Olk::_OutlookBarShortcuts::Item ( const _variant_t & Index ) {
    struct OutlookBarShortcut * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarShortcutPtr(_result, false);
}

#pragma implementation_key(599)
inline Olk::OutlookBarShortcutPtr Olk::_OutlookBarShortcuts::Add ( const _variant_t & Target, _bstr_t Name, const _variant_t & Index ) {
    struct OutlookBarShortcut * _result = 0;
    HRESULT _hr = raw_Add(Target, Name, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarShortcutPtr(_result, false);
}

#pragma implementation_key(600)
inline HRESULT Olk::_OutlookBarShortcuts::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OutlookBarGroup wrapper method implementations
//

#pragma implementation_key(601)
inline Olk::_ApplicationPtr Olk::OutlookBarGroup::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(602)
inline enum Olk::OlObjectClass Olk::OutlookBarGroup::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(603)
inline Olk::_NameSpacePtr Olk::OutlookBarGroup::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(604)
inline IDispatchPtr Olk::OutlookBarGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(605)
inline _bstr_t Olk::OutlookBarGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(606)
inline void Olk::OutlookBarGroup::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(607)
inline Olk::_OutlookBarShortcutsPtr Olk::OutlookBarGroup::GetShortcuts ( ) {
    struct _OutlookBarShortcuts * _result = 0;
    HRESULT _hr = get_Shortcuts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OutlookBarShortcutsPtr(_result, false);
}

#pragma implementation_key(608)
inline enum Olk::OlOutlookBarViewType Olk::OutlookBarGroup::GetViewType ( ) {
    enum OlOutlookBarViewType _result;
    HRESULT _hr = get_ViewType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void Olk::OutlookBarGroup::PutViewType ( enum OlOutlookBarViewType ViewType ) {
    HRESULT _hr = put_ViewType(ViewType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _OutlookBarGroups wrapper method implementations
//

#pragma implementation_key(610)
inline Olk::_ApplicationPtr Olk::_OutlookBarGroups::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(611)
inline enum Olk::OlObjectClass Olk::_OutlookBarGroups::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(612)
inline Olk::_NameSpacePtr Olk::_OutlookBarGroups::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(613)
inline IDispatchPtr Olk::_OutlookBarGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(614)
inline long Olk::_OutlookBarGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline Olk::OutlookBarGroupPtr Olk::_OutlookBarGroups::Item ( const _variant_t & Index ) {
    struct OutlookBarGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarGroupPtr(_result, false);
}

#pragma implementation_key(616)
inline Olk::OutlookBarGroupPtr Olk::_OutlookBarGroups::Add ( _bstr_t Name, const _variant_t & Index ) {
    struct OutlookBarGroup * _result = 0;
    HRESULT _hr = raw_Add(Name, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarGroupPtr(_result, false);
}

#pragma implementation_key(617)
inline HRESULT Olk::_OutlookBarGroups::Remove ( const _variant_t & Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OutlookBarStorage wrapper method implementations
//

#pragma implementation_key(618)
inline Olk::_ApplicationPtr Olk::OutlookBarStorage::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(619)
inline enum Olk::OlObjectClass Olk::OutlookBarStorage::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(620)
inline Olk::_NameSpacePtr Olk::OutlookBarStorage::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(621)
inline IDispatchPtr Olk::OutlookBarStorage::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(622)
inline Olk::_OutlookBarGroupsPtr Olk::OutlookBarStorage::GetGroups ( ) {
    struct _OutlookBarGroups * _result = 0;
    HRESULT _hr = get_Groups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _OutlookBarGroupsPtr(_result, false);
}

//
// interface _OutlookBarPane wrapper method implementations
//

#pragma implementation_key(623)
inline Olk::_ApplicationPtr Olk::_OutlookBarPane::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(624)
inline enum Olk::OlObjectClass Olk::_OutlookBarPane::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(625)
inline Olk::_NameSpacePtr Olk::_OutlookBarPane::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(626)
inline IDispatchPtr Olk::_OutlookBarPane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(627)
inline Olk::OutlookBarStoragePtr Olk::_OutlookBarPane::GetContents ( ) {
    struct OutlookBarStorage * _result = 0;
    HRESULT _hr = get_Contents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarStoragePtr(_result, false);
}

#pragma implementation_key(628)
inline Olk::OutlookBarGroupPtr Olk::_OutlookBarPane::GetCurrentGroup ( ) {
    struct OutlookBarGroup * _result = 0;
    HRESULT _hr = get_CurrentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return OutlookBarGroupPtr(_result, false);
}

#pragma implementation_key(629)
inline void Olk::_OutlookBarPane::PutRefCurrentGroup ( struct OutlookBarGroup * CurrentGroup ) {
    HRESULT _hr = putref_CurrentGroup(CurrentGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(630)
inline _bstr_t Olk::_OutlookBarPane::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(631)
inline VARIANT_BOOL Olk::_OutlookBarPane::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(632)
inline void Olk::_OutlookBarPane::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PropertyPageSite wrapper method implementations
//

#pragma implementation_key(633)
inline Olk::_ApplicationPtr Olk::PropertyPageSite::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(634)
inline enum Olk::OlObjectClass Olk::PropertyPageSite::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline Olk::_NameSpacePtr Olk::PropertyPageSite::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(636)
inline IDispatchPtr Olk::PropertyPageSite::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(637)
inline HRESULT Olk::PropertyPageSite::OnStatusChange ( ) {
    HRESULT _hr = raw_OnStatusChange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Pages wrapper method implementations
//

#pragma implementation_key(638)
inline Olk::_ApplicationPtr Olk::Pages::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(639)
inline enum Olk::OlObjectClass Olk::Pages::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(640)
inline Olk::_NameSpacePtr Olk::Pages::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(641)
inline IDispatchPtr Olk::Pages::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(642)
inline long Olk::Pages::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(643)
inline IDispatchPtr Olk::Pages::Item ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(644)
inline IDispatchPtr Olk::Pages::Add ( const _variant_t & Name ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(645)
inline HRESULT Olk::Pages::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Recipient wrapper method implementations
//

#pragma implementation_key(646)
inline Olk::_ApplicationPtr Olk::Recipient::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(647)
inline enum Olk::OlObjectClass Olk::Recipient::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline Olk::_NameSpacePtr Olk::Recipient::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(649)
inline IDispatchPtr Olk::Recipient::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(650)
inline _bstr_t Olk::Recipient::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(651)
inline Olk::AddressEntryPtr Olk::Recipient::GetAddressEntry ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_AddressEntry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(652)
inline void Olk::Recipient::PutRefAddressEntry ( struct AddressEntry * AddressEntry ) {
    HRESULT _hr = putref_AddressEntry(AddressEntry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(653)
inline _bstr_t Olk::Recipient::GetAutoResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AutoResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(654)
inline void Olk::Recipient::PutAutoResponse ( _bstr_t AutoResponse ) {
    HRESULT _hr = put_AutoResponse(AutoResponse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(655)
inline enum Olk::OlDisplayType Olk::Recipient::GetDisplayType ( ) {
    enum OlDisplayType _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline _bstr_t Olk::Recipient::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(657)
inline long Olk::Recipient::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline enum Olk::OlResponseStatus Olk::Recipient::GetMeetingResponseStatus ( ) {
    enum OlResponseStatus _result;
    HRESULT _hr = get_MeetingResponseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(659)
inline _bstr_t Olk::Recipient::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(660)
inline VARIANT_BOOL Olk::Recipient::GetResolved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Resolved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(661)
inline enum Olk::OlTrackingStatus Olk::Recipient::GetTrackingStatus ( ) {
    enum OlTrackingStatus _result;
    HRESULT _hr = get_TrackingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline void Olk::Recipient::PutTrackingStatus ( enum OlTrackingStatus TrackingStatus ) {
    HRESULT _hr = put_TrackingStatus(TrackingStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(663)
inline DATE Olk::Recipient::GetTrackingStatusTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_TrackingStatusTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline void Olk::Recipient::PutTrackingStatusTime ( DATE TrackingStatusTime ) {
    HRESULT _hr = put_TrackingStatusTime(TrackingStatusTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline long Olk::Recipient::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void Olk::Recipient::PutType ( long Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline HRESULT Olk::Recipient::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(668)
inline _bstr_t Olk::Recipient::FreeBusy ( DATE Start, long MinPerChar, const _variant_t & CompleteFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FreeBusy(Start, MinPerChar, CompleteFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(669)
inline VARIANT_BOOL Olk::Recipient::Resolve ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Resolve(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Recipients wrapper method implementations
//

#pragma implementation_key(670)
inline Olk::_ApplicationPtr Olk::Recipients::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(671)
inline enum Olk::OlObjectClass Olk::Recipients::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(672)
inline Olk::_NameSpacePtr Olk::Recipients::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(673)
inline IDispatchPtr Olk::Recipients::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(674)
inline long Olk::Recipients::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline Olk::RecipientPtr Olk::Recipients::Item ( const _variant_t & Index ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(676)
inline Olk::RecipientPtr Olk::Recipients::Add ( _bstr_t Name ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_Add(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(677)
inline HRESULT Olk::Recipients::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(678)
inline VARIANT_BOOL Olk::Recipients::ResolveAll ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ResolveAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface AddressEntry wrapper method implementations
//

#pragma implementation_key(679)
inline Olk::_ApplicationPtr Olk::AddressEntry::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(680)
inline enum Olk::OlObjectClass Olk::AddressEntry::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(681)
inline Olk::_NameSpacePtr Olk::AddressEntry::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(682)
inline IDispatchPtr Olk::AddressEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(683)
inline _bstr_t Olk::AddressEntry::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(684)
inline void Olk::AddressEntry::PutAddress ( _bstr_t Address ) {
    HRESULT _hr = put_Address(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(685)
inline enum Olk::OlDisplayType Olk::AddressEntry::GetDisplayType ( ) {
    enum OlDisplayType _result;
    HRESULT _hr = get_DisplayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(686)
inline _bstr_t Olk::AddressEntry::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(687)
inline Olk::AddressEntryPtr Olk::AddressEntry::GetManager ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = get_Manager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(688)
inline IUnknownPtr Olk::AddressEntry::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(689)
inline void Olk::AddressEntry::PutMAPIOBJECT ( IUnknown * MAPIOBJECT ) {
    HRESULT _hr = put_MAPIOBJECT(MAPIOBJECT);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(690)
inline Olk::AddressEntriesPtr Olk::AddressEntry::GetMembers ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(691)
inline _bstr_t Olk::AddressEntry::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(692)
inline void Olk::AddressEntry::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(693)
inline _bstr_t Olk::AddressEntry::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(694)
inline void Olk::AddressEntry::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(695)
inline HRESULT Olk::AddressEntry::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(696)
inline HRESULT Olk::AddressEntry::Details ( const _variant_t & HWnd ) {
    HRESULT _hr = raw_Details(HWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(697)
inline _bstr_t Olk::AddressEntry::GetFreeBusy ( DATE Start, long MinPerChar, const _variant_t & CompleteFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFreeBusy(Start, MinPerChar, CompleteFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(698)
inline HRESULT Olk::AddressEntry::Update ( const _variant_t & MakePermanent, const _variant_t & Refresh ) {
    HRESULT _hr = raw_Update(MakePermanent, Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(699)
inline HRESULT Olk::AddressEntry::UpdateFreeBusy ( ) {
    HRESULT _hr = raw_UpdateFreeBusy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AddressEntries wrapper method implementations
//

#pragma implementation_key(700)
inline Olk::_ApplicationPtr Olk::AddressEntries::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(701)
inline enum Olk::OlObjectClass Olk::AddressEntries::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(702)
inline Olk::_NameSpacePtr Olk::AddressEntries::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(703)
inline IDispatchPtr Olk::AddressEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(704)
inline long Olk::AddressEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(705)
inline Olk::AddressEntryPtr Olk::AddressEntries::Item ( const _variant_t & Index ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(706)
inline IUnknownPtr Olk::AddressEntries::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(707)
inline Olk::AddressEntryPtr Olk::AddressEntries::Add ( _bstr_t Type, const _variant_t & Name, const _variant_t & Address ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_Add(Type, Name, Address, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(708)
inline Olk::AddressEntryPtr Olk::AddressEntries::GetFirst ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(709)
inline Olk::AddressEntryPtr Olk::AddressEntries::GetLast ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(710)
inline Olk::AddressEntryPtr Olk::AddressEntries::GetNext ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(711)
inline Olk::AddressEntryPtr Olk::AddressEntries::GetPrevious ( ) {
    struct AddressEntry * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntryPtr(_result, false);
}

#pragma implementation_key(712)
inline HRESULT Olk::AddressEntries::Sort ( const _variant_t & Property, const _variant_t & Order ) {
    HRESULT _hr = raw_Sort(Property, Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AddressList wrapper method implementations
//

#pragma implementation_key(713)
inline Olk::_ApplicationPtr Olk::AddressList::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(714)
inline enum Olk::OlObjectClass Olk::AddressList::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(715)
inline Olk::_NameSpacePtr Olk::AddressList::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(716)
inline IDispatchPtr Olk::AddressList::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(717)
inline Olk::AddressEntriesPtr Olk::AddressList::GetAddressEntries ( ) {
    struct AddressEntries * _result = 0;
    HRESULT _hr = get_AddressEntries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressEntriesPtr(_result, false);
}

#pragma implementation_key(718)
inline _bstr_t Olk::AddressList::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(719)
inline long Olk::AddressList::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(720)
inline VARIANT_BOOL Olk::AddressList::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(721)
inline _bstr_t Olk::AddressList::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface AddressLists wrapper method implementations
//

#pragma implementation_key(722)
inline Olk::_ApplicationPtr Olk::AddressLists::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(723)
inline enum Olk::OlObjectClass Olk::AddressLists::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(724)
inline Olk::_NameSpacePtr Olk::AddressLists::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(725)
inline IDispatchPtr Olk::AddressLists::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(726)
inline long Olk::AddressLists::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(727)
inline Olk::AddressListPtr Olk::AddressLists::Item ( const _variant_t & Index ) {
    struct AddressList * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AddressListPtr(_result, false);
}

//
// interface _Folders wrapper method implementations
//

#pragma implementation_key(728)
inline Olk::_ApplicationPtr Olk::_Folders::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(729)
inline enum Olk::OlObjectClass Olk::_Folders::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline Olk::_NameSpacePtr Olk::_Folders::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(731)
inline IDispatchPtr Olk::_Folders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(732)
inline long Olk::_Folders::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(733)
inline Olk::MAPIFolderPtr Olk::_Folders::Item ( const _variant_t & Index ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(734)
inline IUnknownPtr Olk::_Folders::GetRawTable ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_RawTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(735)
inline Olk::MAPIFolderPtr Olk::_Folders::Add ( _bstr_t Name, const _variant_t & Type ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_Add(Name, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(736)
inline Olk::MAPIFolderPtr Olk::_Folders::GetFirst ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetFirst(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(737)
inline Olk::MAPIFolderPtr Olk::_Folders::GetLast ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetLast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(738)
inline Olk::MAPIFolderPtr Olk::_Folders::GetNext ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(739)
inline Olk::MAPIFolderPtr Olk::_Folders::GetPrevious ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_GetPrevious(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(740)
inline HRESULT Olk::_Folders::Remove ( long Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MAPIFolder wrapper method implementations
//

#pragma implementation_key(741)
inline Olk::_ApplicationPtr Olk::MAPIFolder::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(742)
inline enum Olk::OlObjectClass Olk::MAPIFolder::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(743)
inline Olk::_NameSpacePtr Olk::MAPIFolder::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(744)
inline IDispatchPtr Olk::MAPIFolder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(745)
inline enum Olk::OlItemType Olk::MAPIFolder::GetDefaultItemType ( ) {
    enum OlItemType _result;
    HRESULT _hr = get_DefaultItemType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(746)
inline _bstr_t Olk::MAPIFolder::GetDefaultMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DefaultMessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(747)
inline _bstr_t Olk::MAPIFolder::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(748)
inline void Olk::MAPIFolder::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(749)
inline _bstr_t Olk::MAPIFolder::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(750)
inline Olk::_FoldersPtr Olk::MAPIFolder::GetFolders ( ) {
    struct _Folders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _FoldersPtr(_result, false);
}

#pragma implementation_key(751)
inline Olk::_ItemsPtr Olk::MAPIFolder::GetItems ( ) {
    struct _Items * _result = 0;
    HRESULT _hr = get_Items(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ItemsPtr(_result, false);
}

#pragma implementation_key(752)
inline _bstr_t Olk::MAPIFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(753)
inline void Olk::MAPIFolder::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(754)
inline _bstr_t Olk::MAPIFolder::GetStoreID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StoreID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(755)
inline long Olk::MAPIFolder::GetUnReadItemCount ( ) {
    long _result = 0;
    HRESULT _hr = get_UnReadItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline Olk::MAPIFolderPtr Olk::MAPIFolder::CopyTo ( struct MAPIFolder * DestinationFolder ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_CopyTo(DestinationFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(757)
inline HRESULT Olk::MAPIFolder::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(758)
inline HRESULT Olk::MAPIFolder::Display ( ) {
    HRESULT _hr = raw_Display();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(759)
inline Olk::_ExplorerPtr Olk::MAPIFolder::GetExplorer ( const _variant_t & DisplayMode ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_GetExplorer(DisplayMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

#pragma implementation_key(760)
inline HRESULT Olk::MAPIFolder::MoveTo ( struct MAPIFolder * DestinationFolder ) {
    HRESULT _hr = raw_MoveTo(DestinationFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(761)
inline IDispatchPtr Olk::MAPIFolder::GetUserPermissions ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_UserPermissions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(762)
inline VARIANT_BOOL Olk::MAPIFolder::GetWebViewOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebViewOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(763)
inline void Olk::MAPIFolder::PutWebViewOn ( VARIANT_BOOL WebViewOn ) {
    HRESULT _hr = put_WebViewOn(WebViewOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(764)
inline _bstr_t Olk::MAPIFolder::GetWebViewURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebViewURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(765)
inline void Olk::MAPIFolder::PutWebViewURL ( _bstr_t WebViewURL ) {
    HRESULT _hr = put_WebViewURL(WebViewURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline VARIANT_BOOL Olk::MAPIFolder::GetWebViewAllowNavigation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_WebViewAllowNavigation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void Olk::MAPIFolder::PutWebViewAllowNavigation ( VARIANT_BOOL WebViewAllowNavigation ) {
    HRESULT _hr = put_WebViewAllowNavigation(WebViewAllowNavigation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline HRESULT Olk::MAPIFolder::AddToPFFavorites ( ) {
    HRESULT _hr = raw_AddToPFFavorites();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(769)
inline _bstr_t Olk::MAPIFolder::GetAddressBookName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AddressBookName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(770)
inline void Olk::MAPIFolder::PutAddressBookName ( _bstr_t AddressBookName ) {
    HRESULT _hr = put_AddressBookName(AddressBookName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(771)
inline VARIANT_BOOL Olk::MAPIFolder::GetShowAsOutlookAB ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAsOutlookAB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(772)
inline void Olk::MAPIFolder::PutShowAsOutlookAB ( VARIANT_BOOL ShowAsOutlookAB ) {
    HRESULT _hr = put_ShowAsOutlookAB(ShowAsOutlookAB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(773)
inline _bstr_t Olk::MAPIFolder::GetFolderPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(774)
inline HRESULT Olk::MAPIFolder::AddToFavorites ( const _variant_t & fNoUI, const _variant_t & Name ) {
    HRESULT _hr = raw_AddToFavorites(fNoUI, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(775)
inline VARIANT_BOOL Olk::MAPIFolder::GetInAppFolderSyncObject ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InAppFolderSyncObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(776)
inline void Olk::MAPIFolder::PutInAppFolderSyncObject ( VARIANT_BOOL InAppFolderSyncObject ) {
    HRESULT _hr = put_InAppFolderSyncObject(InAppFolderSyncObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(777)
inline Olk::ViewPtr Olk::MAPIFolder::GetCurrentView ( ) {
    struct View * _result = 0;
    HRESULT _hr = get_CurrentView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ViewPtr(_result, false);
}

#pragma implementation_key(778)
inline VARIANT_BOOL Olk::MAPIFolder::GetCustomViewsOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CustomViewsOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline void Olk::MAPIFolder::PutCustomViewsOnly ( VARIANT_BOOL CustomViewsOnly ) {
    HRESULT _hr = put_CustomViewsOnly(CustomViewsOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(780)
inline Olk::_ViewsPtr Olk::MAPIFolder::GetViews ( ) {
    struct _Views * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ViewsPtr(_result, false);
}

#pragma implementation_key(781)
inline IUnknownPtr Olk::MAPIFolder::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(782)
inline _bstr_t Olk::MAPIFolder::GetFullFolderPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullFolderPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(783)
inline VARIANT_BOOL Olk::MAPIFolder::GetIsSharePointFolder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSharePointFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(784)
inline enum Olk::OlShowItemCount Olk::MAPIFolder::GetShowItemCount ( ) {
    enum OlShowItemCount _result;
    HRESULT _hr = get_ShowItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(785)
inline void Olk::MAPIFolder::PutShowItemCount ( enum OlShowItemCount ShowItemCount ) {
    HRESULT _hr = put_ShowItemCount(ShowItemCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _Explorer wrapper method implementations
//

#pragma implementation_key(786)
inline Olk::_ApplicationPtr Olk::_Explorer::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(787)
inline enum Olk::OlObjectClass Olk::_Explorer::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline Olk::_NameSpacePtr Olk::_Explorer::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(789)
inline IDispatchPtr Olk::_Explorer::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(790)
inline Office::_CommandBarsPtr Olk::_Explorer::GetCommandBars ( ) {
    struct Office::_CommandBars * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Office::_CommandBarsPtr(_result, false);
}

#pragma implementation_key(791)
inline Olk::MAPIFolderPtr Olk::_Explorer::GetCurrentFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_CurrentFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(792)
inline void Olk::_Explorer::PutRefCurrentFolder ( struct MAPIFolder * CurrentFolder ) {
    HRESULT _hr = putref_CurrentFolder(CurrentFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(793)
inline HRESULT Olk::_Explorer::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(794)
inline HRESULT Olk::_Explorer::Display ( ) {
    HRESULT _hr = raw_Display();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(795)
inline _bstr_t Olk::_Explorer::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(796)
inline _variant_t Olk::_Explorer::GetCurrentView ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(797)
inline void Olk::_Explorer::PutCurrentView ( const _variant_t & CurrentView ) {
    HRESULT _hr = put_CurrentView(CurrentView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline long Olk::_Explorer::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void Olk::_Explorer::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline long Olk::_Explorer::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline void Olk::_Explorer::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(802)
inline Olk::PanesPtr Olk::_Explorer::GetPanes ( ) {
    struct Panes * _result = 0;
    HRESULT _hr = get_Panes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PanesPtr(_result, false);
}

#pragma implementation_key(803)
inline Olk::SelectionPtr Olk::_Explorer::GetSelection ( ) {
    struct Selection * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SelectionPtr(_result, false);
}

#pragma implementation_key(804)
inline long Olk::_Explorer::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline void Olk::_Explorer::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline long Olk::_Explorer::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline void Olk::_Explorer::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline enum Olk::OlWindowState Olk::_Explorer::GetWindowState ( ) {
    enum OlWindowState _result;
    HRESULT _hr = get_WindowState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline void Olk::_Explorer::PutWindowState ( enum OlWindowState WindowState ) {
    HRESULT _hr = put_WindowState(WindowState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline HRESULT Olk::_Explorer::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(811)
inline VARIANT_BOOL Olk::_Explorer::IsPaneVisible ( enum OlPane Pane ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsPaneVisible(Pane, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(812)
inline HRESULT Olk::_Explorer::ShowPane ( enum OlPane Pane, VARIANT_BOOL Visible ) {
    HRESULT _hr = raw_ShowPane(Pane, Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(813)
inline IDispatchPtr Olk::_Explorer::GetViews ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Views(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(814)
inline IDispatchPtr Olk::_Explorer::GetHTMLDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_HTMLDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(815)
inline HRESULT Olk::_Explorer::SelectFolder ( struct MAPIFolder * Folder ) {
    HRESULT _hr = raw_SelectFolder(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(816)
inline HRESULT Olk::_Explorer::DeselectFolder ( struct MAPIFolder * Folder ) {
    HRESULT _hr = raw_DeselectFolder(Folder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(817)
inline VARIANT_BOOL Olk::_Explorer::IsFolderSelected ( struct MAPIFolder * Folder ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsFolderSelected(Folder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _Explorers wrapper method implementations
//

#pragma implementation_key(818)
inline Olk::_ApplicationPtr Olk::_Explorers::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(819)
inline enum Olk::OlObjectClass Olk::_Explorers::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(820)
inline Olk::_NameSpacePtr Olk::_Explorers::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(821)
inline IDispatchPtr Olk::_Explorers::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(822)
inline long Olk::_Explorers::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(823)
inline Olk::_ExplorerPtr Olk::_Explorers::Item ( const _variant_t & Index ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

#pragma implementation_key(824)
inline Olk::_ExplorerPtr Olk::_Explorers::Add ( const _variant_t & Folder, enum OlFolderDisplayMode DisplayMode ) {
    struct _Explorer * _result = 0;
    HRESULT _hr = raw_Add(Folder, DisplayMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ExplorerPtr(_result, false);
}

//
// interface Search wrapper method implementations
//

#pragma implementation_key(825)
inline Olk::_ApplicationPtr Olk::Search::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(826)
inline enum Olk::OlObjectClass Olk::Search::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(827)
inline Olk::_NameSpacePtr Olk::Search::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(828)
inline IDispatchPtr Olk::Search::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(829)
inline _bstr_t Olk::Search::GetFilter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Filter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(830)
inline VARIANT_BOOL Olk::Search::GetIsSynchronous ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSynchronous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline Olk::_ResultsPtr Olk::Search::GetResults ( ) {
    struct _Results * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ResultsPtr(_result, false);
}

#pragma implementation_key(832)
inline VARIANT_BOOL Olk::Search::GetSearchSubFolders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchSubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(833)
inline HRESULT Olk::Search::Stop ( ) {
    HRESULT _hr = raw_Stop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(834)
inline _bstr_t Olk::Search::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(835)
inline _bstr_t Olk::Search::GetScope ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Scope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(836)
inline Olk::MAPIFolderPtr Olk::Search::Save ( _bstr_t Name ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = raw_Save(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

//
// interface _AppointmentItem wrapper method implementations
//

#pragma implementation_key(837)
inline Olk::_ApplicationPtr Olk::_AppointmentItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(838)
inline enum Olk::OlObjectClass Olk::_AppointmentItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(839)
inline Olk::_NameSpacePtr Olk::_AppointmentItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(840)
inline IDispatchPtr Olk::_AppointmentItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(841)
inline Olk::ActionsPtr Olk::_AppointmentItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(842)
inline Olk::AttachmentsPtr Olk::_AppointmentItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(843)
inline _bstr_t Olk::_AppointmentItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(844)
inline void Olk::_AppointmentItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline _bstr_t Olk::_AppointmentItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(846)
inline void Olk::_AppointmentItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(847)
inline _bstr_t Olk::_AppointmentItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(848)
inline void Olk::_AppointmentItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(849)
inline _bstr_t Olk::_AppointmentItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(850)
inline void Olk::_AppointmentItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline _bstr_t Olk::_AppointmentItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(852)
inline _bstr_t Olk::_AppointmentItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(853)
inline DATE Olk::_AppointmentItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(854)
inline _bstr_t Olk::_AppointmentItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(855)
inline Olk::FormDescriptionPtr Olk::_AppointmentItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(856)
inline Olk::_InspectorPtr Olk::_AppointmentItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(857)
inline enum Olk::OlImportance Olk::_AppointmentItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(858)
inline void Olk::_AppointmentItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(859)
inline DATE Olk::_AppointmentItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(860)
inline IUnknownPtr Olk::_AppointmentItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(861)
inline _bstr_t Olk::_AppointmentItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(862)
inline void Olk::_AppointmentItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(863)
inline _bstr_t Olk::_AppointmentItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(864)
inline void Olk::_AppointmentItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(865)
inline VARIANT_BOOL Olk::_AppointmentItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(866)
inline void Olk::_AppointmentItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(867)
inline long Olk::_AppointmentItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(868)
inline _bstr_t Olk::_AppointmentItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(869)
inline VARIANT_BOOL Olk::_AppointmentItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(870)
inline enum Olk::OlSensitivity Olk::_AppointmentItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline void Olk::_AppointmentItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline long Olk::_AppointmentItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline _bstr_t Olk::_AppointmentItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(874)
inline void Olk::_AppointmentItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(875)
inline VARIANT_BOOL Olk::_AppointmentItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(876)
inline void Olk::_AppointmentItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(877)
inline Olk::UserPropertiesPtr Olk::_AppointmentItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(878)
inline HRESULT Olk::_AppointmentItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(879)
inline IDispatchPtr Olk::_AppointmentItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(880)
inline HRESULT Olk::_AppointmentItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(881)
inline HRESULT Olk::_AppointmentItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(882)
inline IDispatchPtr Olk::_AppointmentItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(883)
inline HRESULT Olk::_AppointmentItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(884)
inline HRESULT Olk::_AppointmentItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(885)
inline HRESULT Olk::_AppointmentItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(886)
inline VARIANT_BOOL Olk::_AppointmentItem::GetAllDayEvent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllDayEvent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(887)
inline void Olk::_AppointmentItem::PutAllDayEvent ( VARIANT_BOOL AllDayEvent ) {
    HRESULT _hr = put_AllDayEvent(AllDayEvent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(888)
inline enum Olk::OlBusyStatus Olk::_AppointmentItem::GetBusyStatus ( ) {
    enum OlBusyStatus _result;
    HRESULT _hr = get_BusyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(889)
inline void Olk::_AppointmentItem::PutBusyStatus ( enum OlBusyStatus BusyStatus ) {
    HRESULT _hr = put_BusyStatus(BusyStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(890)
inline long Olk::_AppointmentItem::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(891)
inline void Olk::_AppointmentItem::PutDuration ( long Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(892)
inline DATE Olk::_AppointmentItem::GetEnd ( ) {
    DATE _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(893)
inline void Olk::_AppointmentItem::PutEnd ( DATE End ) {
    HRESULT _hr = put_End(End);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(894)
inline VARIANT_BOOL Olk::_AppointmentItem::GetIsOnlineMeeting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOnlineMeeting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(895)
inline void Olk::_AppointmentItem::PutIsOnlineMeeting ( VARIANT_BOOL IsOnlineMeeting ) {
    HRESULT _hr = put_IsOnlineMeeting(IsOnlineMeeting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(896)
inline VARIANT_BOOL Olk::_AppointmentItem::GetIsRecurring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecurring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(897)
inline _bstr_t Olk::_AppointmentItem::GetLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(898)
inline void Olk::_AppointmentItem::PutLocation ( _bstr_t Location ) {
    HRESULT _hr = put_Location(Location);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(899)
inline enum Olk::OlMeetingStatus Olk::_AppointmentItem::GetMeetingStatus ( ) {
    enum OlMeetingStatus _result;
    HRESULT _hr = get_MeetingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(900)
inline void Olk::_AppointmentItem::PutMeetingStatus ( enum OlMeetingStatus MeetingStatus ) {
    HRESULT _hr = put_MeetingStatus(MeetingStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(901)
inline VARIANT_BOOL Olk::_AppointmentItem::GetNetMeetingAutoStart ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NetMeetingAutoStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(902)
inline void Olk::_AppointmentItem::PutNetMeetingAutoStart ( VARIANT_BOOL NetMeetingAutoStart ) {
    HRESULT _hr = put_NetMeetingAutoStart(NetMeetingAutoStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(903)
inline _bstr_t Olk::_AppointmentItem::GetNetMeetingOrganizerAlias ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingOrganizerAlias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(904)
inline void Olk::_AppointmentItem::PutNetMeetingOrganizerAlias ( _bstr_t NetMeetingOrganizerAlias ) {
    HRESULT _hr = put_NetMeetingOrganizerAlias(NetMeetingOrganizerAlias);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(905)
inline _bstr_t Olk::_AppointmentItem::GetNetMeetingServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(906)
inline void Olk::_AppointmentItem::PutNetMeetingServer ( _bstr_t NetMeetingServer ) {
    HRESULT _hr = put_NetMeetingServer(NetMeetingServer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(907)
inline enum Olk::OlNetMeetingType Olk::_AppointmentItem::GetNetMeetingType ( ) {
    enum OlNetMeetingType _result;
    HRESULT _hr = get_NetMeetingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(908)
inline void Olk::_AppointmentItem::PutNetMeetingType ( enum OlNetMeetingType NetMeetingType ) {
    HRESULT _hr = put_NetMeetingType(NetMeetingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(909)
inline _bstr_t Olk::_AppointmentItem::GetOptionalAttendees ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OptionalAttendees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(910)
inline void Olk::_AppointmentItem::PutOptionalAttendees ( _bstr_t OptionalAttendees ) {
    HRESULT _hr = put_OptionalAttendees(OptionalAttendees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(911)
inline _bstr_t Olk::_AppointmentItem::GetOrganizer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Organizer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(912)
inline Olk::RecipientsPtr Olk::_AppointmentItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(913)
inline enum Olk::OlRecurrenceState Olk::_AppointmentItem::GetRecurrenceState ( ) {
    enum OlRecurrenceState _result;
    HRESULT _hr = get_RecurrenceState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(914)
inline long Olk::_AppointmentItem::GetReminderMinutesBeforeStart ( ) {
    long _result = 0;
    HRESULT _hr = get_ReminderMinutesBeforeStart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline void Olk::_AppointmentItem::PutReminderMinutesBeforeStart ( long ReminderMinutesBeforeStart ) {
    HRESULT _hr = put_ReminderMinutesBeforeStart(ReminderMinutesBeforeStart);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(916)
inline VARIANT_BOOL Olk::_AppointmentItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(917)
inline void Olk::_AppointmentItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(918)
inline VARIANT_BOOL Olk::_AppointmentItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(919)
inline void Olk::_AppointmentItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(920)
inline VARIANT_BOOL Olk::_AppointmentItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(921)
inline void Olk::_AppointmentItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(922)
inline _bstr_t Olk::_AppointmentItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(923)
inline void Olk::_AppointmentItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(924)
inline DATE Olk::_AppointmentItem::GetReplyTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReplyTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(925)
inline void Olk::_AppointmentItem::PutReplyTime ( DATE ReplyTime ) {
    HRESULT _hr = put_ReplyTime(ReplyTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(926)
inline _bstr_t Olk::_AppointmentItem::GetRequiredAttendees ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequiredAttendees(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(927)
inline void Olk::_AppointmentItem::PutRequiredAttendees ( _bstr_t RequiredAttendees ) {
    HRESULT _hr = put_RequiredAttendees(RequiredAttendees);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(928)
inline _bstr_t Olk::_AppointmentItem::GetResources ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Resources(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(929)
inline void Olk::_AppointmentItem::PutResources ( _bstr_t Resources ) {
    HRESULT _hr = put_Resources(Resources);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(930)
inline VARIANT_BOOL Olk::_AppointmentItem::GetResponseRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ResponseRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(931)
inline void Olk::_AppointmentItem::PutResponseRequested ( VARIANT_BOOL ResponseRequested ) {
    HRESULT _hr = put_ResponseRequested(ResponseRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(932)
inline enum Olk::OlResponseStatus Olk::_AppointmentItem::GetResponseStatus ( ) {
    enum OlResponseStatus _result;
    HRESULT _hr = get_ResponseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(933)
inline DATE Olk::_AppointmentItem::GetStart ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void Olk::_AppointmentItem::PutStart ( DATE Start ) {
    HRESULT _hr = put_Start(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline HRESULT Olk::_AppointmentItem::ClearRecurrencePattern ( ) {
    HRESULT _hr = raw_ClearRecurrencePattern();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(936)
inline Olk::_MailItemPtr Olk::_AppointmentItem::ForwardAsVcal ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ForwardAsVcal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(937)
inline Olk::RecurrencePatternPtr Olk::_AppointmentItem::GetRecurrencePattern ( ) {
    struct RecurrencePattern * _result = 0;
    HRESULT _hr = raw_GetRecurrencePattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecurrencePatternPtr(_result, false);
}

#pragma implementation_key(938)
inline Olk::_MeetingItemPtr Olk::_AppointmentItem::Respond ( enum OlMeetingResponse Response, const _variant_t & fNoUI, const _variant_t & fAdditionalTextDialog ) {
    struct _MeetingItem * _result = 0;
    HRESULT _hr = raw_Respond(Response, fNoUI, fAdditionalTextDialog, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MeetingItemPtr(_result, false);
}

#pragma implementation_key(939)
inline HRESULT Olk::_AppointmentItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(940)
inline _bstr_t Olk::_AppointmentItem::GetNetMeetingDocPathName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingDocPathName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(941)
inline void Olk::_AppointmentItem::PutNetMeetingDocPathName ( _bstr_t NetMeetingDocPathName ) {
    HRESULT _hr = put_NetMeetingDocPathName(NetMeetingDocPathName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline _bstr_t Olk::_AppointmentItem::GetNetShowURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetShowURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(943)
inline void Olk::_AppointmentItem::PutNetShowURL ( _bstr_t NetShowURL ) {
    HRESULT _hr = put_NetShowURL(NetShowURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline Olk::LinksPtr Olk::_AppointmentItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(945)
inline VARIANT_BOOL Olk::_AppointmentItem::GetConferenceServerAllowExternal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ConferenceServerAllowExternal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(946)
inline void Olk::_AppointmentItem::PutConferenceServerAllowExternal ( VARIANT_BOOL ConferenceServerAllowExternal ) {
    HRESULT _hr = put_ConferenceServerAllowExternal(ConferenceServerAllowExternal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(947)
inline _bstr_t Olk::_AppointmentItem::GetConferenceServerPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConferenceServerPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(948)
inline void Olk::_AppointmentItem::PutConferenceServerPassword ( _bstr_t ConferenceServerPassword ) {
    HRESULT _hr = put_ConferenceServerPassword(ConferenceServerPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(949)
inline Olk::ItemPropertiesPtr Olk::_AppointmentItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(950)
inline enum Olk::OlDownloadState Olk::_AppointmentItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline HRESULT Olk::_AppointmentItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(952)
inline long Olk::_AppointmentItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void Olk::_AppointmentItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline enum Olk::OlRemoteStatus Olk::_AppointmentItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void Olk::_AppointmentItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline VARIANT_BOOL Olk::_AppointmentItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline _bstr_t Olk::_AppointmentItem::GetMeetingWorkspaceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MeetingWorkspaceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(958)
inline VARIANT_BOOL Olk::_AppointmentItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(959)
inline Olk::ConflictsPtr Olk::_AppointmentItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _MailItem wrapper method implementations
//

#pragma implementation_key(960)
inline Olk::_ApplicationPtr Olk::_MailItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(961)
inline enum Olk::OlObjectClass Olk::_MailItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(962)
inline Olk::_NameSpacePtr Olk::_MailItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(963)
inline IDispatchPtr Olk::_MailItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(964)
inline Olk::ActionsPtr Olk::_MailItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(965)
inline Olk::AttachmentsPtr Olk::_MailItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(966)
inline _bstr_t Olk::_MailItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(967)
inline void Olk::_MailItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(968)
inline _bstr_t Olk::_MailItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(969)
inline void Olk::_MailItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline _bstr_t Olk::_MailItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(971)
inline void Olk::_MailItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(972)
inline _bstr_t Olk::_MailItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(973)
inline void Olk::_MailItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(974)
inline _bstr_t Olk::_MailItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(975)
inline _bstr_t Olk::_MailItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(976)
inline DATE Olk::_MailItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(977)
inline _bstr_t Olk::_MailItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(978)
inline Olk::FormDescriptionPtr Olk::_MailItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(979)
inline Olk::_InspectorPtr Olk::_MailItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(980)
inline enum Olk::OlImportance Olk::_MailItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(981)
inline void Olk::_MailItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(982)
inline DATE Olk::_MailItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(983)
inline IUnknownPtr Olk::_MailItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(984)
inline _bstr_t Olk::_MailItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(985)
inline void Olk::_MailItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(986)
inline _bstr_t Olk::_MailItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(987)
inline void Olk::_MailItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(988)
inline VARIANT_BOOL Olk::_MailItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(989)
inline void Olk::_MailItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(990)
inline long Olk::_MailItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(991)
inline _bstr_t Olk::_MailItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(992)
inline VARIANT_BOOL Olk::_MailItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(993)
inline enum Olk::OlSensitivity Olk::_MailItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(994)
inline void Olk::_MailItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(995)
inline long Olk::_MailItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(996)
inline _bstr_t Olk::_MailItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(997)
inline void Olk::_MailItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline VARIANT_BOOL Olk::_MailItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void Olk::_MailItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline Olk::UserPropertiesPtr Olk::_MailItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1001)
inline HRESULT Olk::_MailItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1002)
inline IDispatchPtr Olk::_MailItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1003)
inline HRESULT Olk::_MailItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1004)
inline HRESULT Olk::_MailItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1005)
inline IDispatchPtr Olk::_MailItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1006)
inline HRESULT Olk::_MailItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1007)
inline HRESULT Olk::_MailItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1008)
inline HRESULT Olk::_MailItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1009)
inline VARIANT_BOOL Olk::_MailItem::GetAlternateRecipientAllowed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AlternateRecipientAllowed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1010)
inline void Olk::_MailItem::PutAlternateRecipientAllowed ( VARIANT_BOOL AlternateRecipientAllowed ) {
    HRESULT _hr = put_AlternateRecipientAllowed(AlternateRecipientAllowed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline VARIANT_BOOL Olk::_MailItem::GetAutoForwarded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoForwarded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1012)
inline void Olk::_MailItem::PutAutoForwarded ( VARIANT_BOOL AutoForwarded ) {
    HRESULT _hr = put_AutoForwarded(AutoForwarded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline _bstr_t Olk::_MailItem::GetBCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BCC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1014)
inline void Olk::_MailItem::PutBCC ( _bstr_t BCC ) {
    HRESULT _hr = put_BCC(BCC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1015)
inline _bstr_t Olk::_MailItem::GetCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1016)
inline void Olk::_MailItem::PutCC ( _bstr_t CC ) {
    HRESULT _hr = put_CC(CC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline DATE Olk::_MailItem::GetDeferredDeliveryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DeferredDeliveryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1018)
inline void Olk::_MailItem::PutDeferredDeliveryTime ( DATE DeferredDeliveryTime ) {
    HRESULT _hr = put_DeferredDeliveryTime(DeferredDeliveryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline VARIANT_BOOL Olk::_MailItem::GetDeleteAfterSubmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteAfterSubmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline void Olk::_MailItem::PutDeleteAfterSubmit ( VARIANT_BOOL DeleteAfterSubmit ) {
    HRESULT _hr = put_DeleteAfterSubmit(DeleteAfterSubmit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline DATE Olk::_MailItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void Olk::_MailItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline DATE Olk::_MailItem::GetFlagDueBy ( ) {
    DATE _result = 0;
    HRESULT _hr = get_FlagDueBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void Olk::_MailItem::PutFlagDueBy ( DATE FlagDueBy ) {
    HRESULT _hr = put_FlagDueBy(FlagDueBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline _bstr_t Olk::_MailItem::GetFlagRequest ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlagRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1026)
inline void Olk::_MailItem::PutFlagRequest ( _bstr_t FlagRequest ) {
    HRESULT _hr = put_FlagRequest(FlagRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline enum Olk::OlFlagStatus Olk::_MailItem::GetFlagStatus ( ) {
    enum OlFlagStatus _result;
    HRESULT _hr = get_FlagStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void Olk::_MailItem::PutFlagStatus ( enum OlFlagStatus FlagStatus ) {
    HRESULT _hr = put_FlagStatus(FlagStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline _bstr_t Olk::_MailItem::GetHTMLBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1030)
inline void Olk::_MailItem::PutHTMLBody ( _bstr_t HTMLBody ) {
    HRESULT _hr = put_HTMLBody(HTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline VARIANT_BOOL Olk::_MailItem::GetOriginatorDeliveryReportRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginatorDeliveryReportRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline void Olk::_MailItem::PutOriginatorDeliveryReportRequested ( VARIANT_BOOL OriginatorDeliveryReportRequested ) {
    HRESULT _hr = put_OriginatorDeliveryReportRequested(OriginatorDeliveryReportRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline VARIANT_BOOL Olk::_MailItem::GetReadReceiptRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadReceiptRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline void Olk::_MailItem::PutReadReceiptRequested ( VARIANT_BOOL ReadReceiptRequested ) {
    HRESULT _hr = put_ReadReceiptRequested(ReadReceiptRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline _bstr_t Olk::_MailItem::GetReceivedByEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1036)
inline _bstr_t Olk::_MailItem::GetReceivedByName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedByName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1037)
inline _bstr_t Olk::_MailItem::GetReceivedOnBehalfOfEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedOnBehalfOfEntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1038)
inline _bstr_t Olk::_MailItem::GetReceivedOnBehalfOfName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceivedOnBehalfOfName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1039)
inline DATE Olk::_MailItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline VARIANT_BOOL Olk::_MailItem::GetRecipientReassignmentProhibited ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RecipientReassignmentProhibited(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1041)
inline void Olk::_MailItem::PutRecipientReassignmentProhibited ( VARIANT_BOOL RecipientReassignmentProhibited ) {
    HRESULT _hr = put_RecipientReassignmentProhibited(RecipientReassignmentProhibited);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1042)
inline Olk::RecipientsPtr Olk::_MailItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(1043)
inline VARIANT_BOOL Olk::_MailItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void Olk::_MailItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline VARIANT_BOOL Olk::_MailItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline void Olk::_MailItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline VARIANT_BOOL Olk::_MailItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1048)
inline void Olk::_MailItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline _bstr_t Olk::_MailItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1050)
inline void Olk::_MailItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline DATE Olk::_MailItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1052)
inline void Olk::_MailItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline enum Olk::OlRemoteStatus Olk::_MailItem::GetRemoteStatus ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_RemoteStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void Olk::_MailItem::PutRemoteStatus ( enum OlRemoteStatus RemoteStatus ) {
    HRESULT _hr = put_RemoteStatus(RemoteStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline _bstr_t Olk::_MailItem::GetReplyRecipientNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReplyRecipientNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1056)
inline Olk::RecipientsPtr Olk::_MailItem::GetReplyRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_ReplyRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(1057)
inline Olk::MAPIFolderPtr Olk::_MailItem::GetSaveSentMessageFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_SaveSentMessageFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(1058)
inline void Olk::_MailItem::PutRefSaveSentMessageFolder ( struct MAPIFolder * SaveSentMessageFolder ) {
    HRESULT _hr = putref_SaveSentMessageFolder(SaveSentMessageFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline _bstr_t Olk::_MailItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1060)
inline VARIANT_BOOL Olk::_MailItem::GetSent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1061)
inline DATE Olk::_MailItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline _bstr_t Olk::_MailItem::GetSentOnBehalfOfName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SentOnBehalfOfName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1063)
inline void Olk::_MailItem::PutSentOnBehalfOfName ( _bstr_t SentOnBehalfOfName ) {
    HRESULT _hr = put_SentOnBehalfOfName(SentOnBehalfOfName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1064)
inline VARIANT_BOOL Olk::_MailItem::GetSubmitted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Submitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1065)
inline _bstr_t Olk::_MailItem::GetTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_To(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1066)
inline void Olk::_MailItem::PutTo ( _bstr_t To ) {
    HRESULT _hr = put_To(To);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline _bstr_t Olk::_MailItem::GetVotingOptions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VotingOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1068)
inline void Olk::_MailItem::PutVotingOptions ( _bstr_t VotingOptions ) {
    HRESULT _hr = put_VotingOptions(VotingOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline _bstr_t Olk::_MailItem::GetVotingResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VotingResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1070)
inline void Olk::_MailItem::PutVotingResponse ( _bstr_t VotingResponse ) {
    HRESULT _hr = put_VotingResponse(VotingResponse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline HRESULT Olk::_MailItem::ClearConversationIndex ( ) {
    HRESULT _hr = raw_ClearConversationIndex();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1072)
inline Olk::_MailItemPtr Olk::_MailItem::Forward ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1073)
inline Olk::_MailItemPtr Olk::_MailItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1074)
inline Olk::_MailItemPtr Olk::_MailItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1075)
inline HRESULT Olk::_MailItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1076)
inline Olk::LinksPtr Olk::_MailItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1077)
inline Olk::ItemPropertiesPtr Olk::_MailItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1078)
inline enum Olk::OlBodyFormat Olk::_MailItem::GetBodyFormat ( ) {
    enum OlBodyFormat _result;
    HRESULT _hr = get_BodyFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1079)
inline void Olk::_MailItem::PutBodyFormat ( enum OlBodyFormat BodyFormat ) {
    HRESULT _hr = put_BodyFormat(BodyFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1080)
inline enum Olk::OlDownloadState Olk::_MailItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1081)
inline HRESULT Olk::_MailItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1082)
inline long Olk::_MailItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1083)
inline void Olk::_MailItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1084)
inline enum Olk::OlRemoteStatus Olk::_MailItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1085)
inline void Olk::_MailItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1086)
inline VARIANT_BOOL Olk::_MailItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1087)
inline VARIANT_BOOL Olk::_MailItem::GetIsIPFax ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsIPFax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1088)
inline void Olk::_MailItem::PutIsIPFax ( VARIANT_BOOL IsIPFax ) {
    HRESULT _hr = put_IsIPFax(IsIPFax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline enum Olk::OlFlagIcon Olk::_MailItem::GetFlagIcon ( ) {
    enum OlFlagIcon _result;
    HRESULT _hr = get_FlagIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1090)
inline void Olk::_MailItem::PutFlagIcon ( enum OlFlagIcon FlagIcon ) {
    HRESULT _hr = put_FlagIcon(FlagIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1091)
inline VARIANT_BOOL Olk::_MailItem::GetHasCoverSheet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasCoverSheet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline void Olk::_MailItem::PutHasCoverSheet ( VARIANT_BOOL HasCoverSheet ) {
    HRESULT _hr = put_HasCoverSheet(HasCoverSheet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline VARIANT_BOOL Olk::_MailItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline Olk::ConflictsPtr Olk::_MailItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(1095)
inline _bstr_t Olk::_MailItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1096)
inline _bstr_t Olk::_MailItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1097)
inline VARIANT_BOOL Olk::_MailItem::GetEnableSharedAttachments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableSharedAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1098)
inline void Olk::_MailItem::PutEnableSharedAttachments ( VARIANT_BOOL EnableSharedAttachments ) {
    HRESULT _hr = put_EnableSharedAttachments(EnableSharedAttachments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1099)
inline enum Olk::OlPermission Olk::_MailItem::GetPermission ( ) {
    enum OlPermission _result;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1100)
inline void Olk::_MailItem::PutPermission ( enum OlPermission Permission ) {
    HRESULT _hr = put_Permission(Permission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1101)
inline enum Olk::OlPermissionService Olk::_MailItem::GetPermissionService ( ) {
    enum OlPermissionService _result;
    HRESULT _hr = get_PermissionService(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1102)
inline void Olk::_MailItem::PutPermissionService ( enum OlPermissionService PermissionService ) {
    HRESULT _hr = put_PermissionService(PermissionService);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _MeetingItem wrapper method implementations
//

#pragma implementation_key(1103)
inline Olk::_ApplicationPtr Olk::_MeetingItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1104)
inline enum Olk::OlObjectClass Olk::_MeetingItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline Olk::_NameSpacePtr Olk::_MeetingItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1106)
inline IDispatchPtr Olk::_MeetingItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1107)
inline Olk::ActionsPtr Olk::_MeetingItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1108)
inline Olk::AttachmentsPtr Olk::_MeetingItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1109)
inline _bstr_t Olk::_MeetingItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1110)
inline void Olk::_MeetingItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1111)
inline _bstr_t Olk::_MeetingItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1112)
inline void Olk::_MeetingItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1113)
inline _bstr_t Olk::_MeetingItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1114)
inline void Olk::_MeetingItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1115)
inline _bstr_t Olk::_MeetingItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1116)
inline void Olk::_MeetingItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1117)
inline _bstr_t Olk::_MeetingItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1118)
inline _bstr_t Olk::_MeetingItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1119)
inline DATE Olk::_MeetingItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1120)
inline _bstr_t Olk::_MeetingItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1121)
inline Olk::FormDescriptionPtr Olk::_MeetingItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1122)
inline Olk::_InspectorPtr Olk::_MeetingItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1123)
inline enum Olk::OlImportance Olk::_MeetingItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1124)
inline void Olk::_MeetingItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1125)
inline DATE Olk::_MeetingItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1126)
inline IUnknownPtr Olk::_MeetingItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1127)
inline _bstr_t Olk::_MeetingItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1128)
inline void Olk::_MeetingItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1129)
inline _bstr_t Olk::_MeetingItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1130)
inline void Olk::_MeetingItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1131)
inline VARIANT_BOOL Olk::_MeetingItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1132)
inline void Olk::_MeetingItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1133)
inline long Olk::_MeetingItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1134)
inline _bstr_t Olk::_MeetingItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1135)
inline VARIANT_BOOL Olk::_MeetingItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1136)
inline enum Olk::OlSensitivity Olk::_MeetingItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline void Olk::_MeetingItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline long Olk::_MeetingItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1139)
inline _bstr_t Olk::_MeetingItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1140)
inline void Olk::_MeetingItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1141)
inline VARIANT_BOOL Olk::_MeetingItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1142)
inline void Olk::_MeetingItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1143)
inline Olk::UserPropertiesPtr Olk::_MeetingItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1144)
inline HRESULT Olk::_MeetingItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1145)
inline IDispatchPtr Olk::_MeetingItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1146)
inline HRESULT Olk::_MeetingItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1147)
inline HRESULT Olk::_MeetingItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1148)
inline IDispatchPtr Olk::_MeetingItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1149)
inline HRESULT Olk::_MeetingItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1150)
inline HRESULT Olk::_MeetingItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1151)
inline HRESULT Olk::_MeetingItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1152)
inline VARIANT_BOOL Olk::_MeetingItem::GetAutoForwarded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoForwarded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void Olk::_MeetingItem::PutAutoForwarded ( VARIANT_BOOL AutoForwarded ) {
    HRESULT _hr = put_AutoForwarded(AutoForwarded);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline DATE Olk::_MeetingItem::GetDeferredDeliveryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DeferredDeliveryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void Olk::_MeetingItem::PutDeferredDeliveryTime ( DATE DeferredDeliveryTime ) {
    HRESULT _hr = put_DeferredDeliveryTime(DeferredDeliveryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline VARIANT_BOOL Olk::_MeetingItem::GetDeleteAfterSubmit ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DeleteAfterSubmit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1157)
inline void Olk::_MeetingItem::PutDeleteAfterSubmit ( VARIANT_BOOL DeleteAfterSubmit ) {
    HRESULT _hr = put_DeleteAfterSubmit(DeleteAfterSubmit);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline DATE Olk::_MeetingItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1159)
inline void Olk::_MeetingItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline DATE Olk::_MeetingItem::GetFlagDueBy ( ) {
    DATE _result = 0;
    HRESULT _hr = get_FlagDueBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void Olk::_MeetingItem::PutFlagDueBy ( DATE FlagDueBy ) {
    HRESULT _hr = put_FlagDueBy(FlagDueBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline _bstr_t Olk::_MeetingItem::GetFlagRequest ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FlagRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1163)
inline void Olk::_MeetingItem::PutFlagRequest ( _bstr_t FlagRequest ) {
    HRESULT _hr = put_FlagRequest(FlagRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1164)
inline enum Olk::OlFlagStatus Olk::_MeetingItem::GetFlagStatus ( ) {
    enum OlFlagStatus _result;
    HRESULT _hr = get_FlagStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1165)
inline void Olk::_MeetingItem::PutFlagStatus ( enum OlFlagStatus FlagStatus ) {
    HRESULT _hr = put_FlagStatus(FlagStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1166)
inline VARIANT_BOOL Olk::_MeetingItem::GetOriginatorDeliveryReportRequested ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OriginatorDeliveryReportRequested(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline void Olk::_MeetingItem::PutOriginatorDeliveryReportRequested ( VARIANT_BOOL OriginatorDeliveryReportRequested ) {
    HRESULT _hr = put_OriginatorDeliveryReportRequested(OriginatorDeliveryReportRequested);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1168)
inline DATE Olk::_MeetingItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1169)
inline void Olk::_MeetingItem::PutReceivedTime ( DATE ReceivedTime ) {
    HRESULT _hr = put_ReceivedTime(ReceivedTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1170)
inline Olk::RecipientsPtr Olk::_MeetingItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(1171)
inline VARIANT_BOOL Olk::_MeetingItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1172)
inline void Olk::_MeetingItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1173)
inline DATE Olk::_MeetingItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1174)
inline void Olk::_MeetingItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1175)
inline Olk::RecipientsPtr Olk::_MeetingItem::GetReplyRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_ReplyRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(1176)
inline Olk::MAPIFolderPtr Olk::_MeetingItem::GetSaveSentMessageFolder ( ) {
    struct MAPIFolder * _result = 0;
    HRESULT _hr = get_SaveSentMessageFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MAPIFolderPtr(_result, false);
}

#pragma implementation_key(1177)
inline void Olk::_MeetingItem::PutRefSaveSentMessageFolder ( struct MAPIFolder * SaveSentMessageFolder ) {
    HRESULT _hr = putref_SaveSentMessageFolder(SaveSentMessageFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1178)
inline _bstr_t Olk::_MeetingItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1179)
inline VARIANT_BOOL Olk::_MeetingItem::GetSent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1180)
inline DATE Olk::_MeetingItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1181)
inline VARIANT_BOOL Olk::_MeetingItem::GetSubmitted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Submitted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1182)
inline Olk::_MeetingItemPtr Olk::_MeetingItem::Forward ( ) {
    struct _MeetingItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MeetingItemPtr(_result, false);
}

#pragma implementation_key(1183)
inline Olk::_AppointmentItemPtr Olk::_MeetingItem::GetAssociatedAppointment ( VARIANT_BOOL AddToCalendar ) {
    struct _AppointmentItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedAppointment(AddToCalendar, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _AppointmentItemPtr(_result, false);
}

#pragma implementation_key(1184)
inline Olk::_MailItemPtr Olk::_MeetingItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1185)
inline Olk::_MailItemPtr Olk::_MeetingItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1186)
inline HRESULT Olk::_MeetingItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1187)
inline Olk::LinksPtr Olk::_MeetingItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1188)
inline enum Olk::OlDownloadState Olk::_MeetingItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1189)
inline HRESULT Olk::_MeetingItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1190)
inline Olk::ItemPropertiesPtr Olk::_MeetingItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1191)
inline enum Olk::OlRemoteStatus Olk::_MeetingItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1192)
inline void Olk::_MeetingItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline VARIANT_BOOL Olk::_MeetingItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1194)
inline _bstr_t Olk::_MeetingItem::GetMeetingWorkspaceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MeetingWorkspaceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1195)
inline enum Olk::OlFlagIcon Olk::_MeetingItem::GetFlagIcon ( ) {
    enum OlFlagIcon _result;
    HRESULT _hr = get_FlagIcon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1196)
inline void Olk::_MeetingItem::PutFlagIcon ( enum OlFlagIcon FlagIcon ) {
    HRESULT _hr = put_FlagIcon(FlagIcon);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1197)
inline VARIANT_BOOL Olk::_MeetingItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1198)
inline Olk::ConflictsPtr Olk::_MeetingItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(1199)
inline _bstr_t Olk::_MeetingItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1200)
inline _bstr_t Olk::_MeetingItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _ContactItem wrapper method implementations
//

#pragma implementation_key(1201)
inline Olk::_ApplicationPtr Olk::_ContactItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1202)
inline enum Olk::OlObjectClass Olk::_ContactItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1203)
inline Olk::_NameSpacePtr Olk::_ContactItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1204)
inline IDispatchPtr Olk::_ContactItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1205)
inline Olk::ActionsPtr Olk::_ContactItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1206)
inline Olk::AttachmentsPtr Olk::_ContactItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1207)
inline _bstr_t Olk::_ContactItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1208)
inline void Olk::_ContactItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1209)
inline _bstr_t Olk::_ContactItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1210)
inline void Olk::_ContactItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1211)
inline _bstr_t Olk::_ContactItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1212)
inline void Olk::_ContactItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1213)
inline _bstr_t Olk::_ContactItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1214)
inline void Olk::_ContactItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1215)
inline _bstr_t Olk::_ContactItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1216)
inline _bstr_t Olk::_ContactItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1217)
inline DATE Olk::_ContactItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1218)
inline _bstr_t Olk::_ContactItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1219)
inline Olk::FormDescriptionPtr Olk::_ContactItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1220)
inline Olk::_InspectorPtr Olk::_ContactItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1221)
inline enum Olk::OlImportance Olk::_ContactItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1222)
inline void Olk::_ContactItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1223)
inline DATE Olk::_ContactItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1224)
inline IUnknownPtr Olk::_ContactItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1225)
inline _bstr_t Olk::_ContactItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1226)
inline void Olk::_ContactItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1227)
inline _bstr_t Olk::_ContactItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1228)
inline void Olk::_ContactItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1229)
inline VARIANT_BOOL Olk::_ContactItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline void Olk::_ContactItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1231)
inline long Olk::_ContactItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1232)
inline _bstr_t Olk::_ContactItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1233)
inline VARIANT_BOOL Olk::_ContactItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1234)
inline enum Olk::OlSensitivity Olk::_ContactItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1235)
inline void Olk::_ContactItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1236)
inline long Olk::_ContactItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1237)
inline _bstr_t Olk::_ContactItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1238)
inline void Olk::_ContactItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1239)
inline VARIANT_BOOL Olk::_ContactItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline void Olk::_ContactItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1241)
inline Olk::UserPropertiesPtr Olk::_ContactItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1242)
inline HRESULT Olk::_ContactItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1243)
inline IDispatchPtr Olk::_ContactItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1244)
inline HRESULT Olk::_ContactItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1245)
inline HRESULT Olk::_ContactItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1246)
inline IDispatchPtr Olk::_ContactItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1247)
inline HRESULT Olk::_ContactItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1248)
inline HRESULT Olk::_ContactItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1249)
inline HRESULT Olk::_ContactItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1250)
inline _bstr_t Olk::_ContactItem::GetAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Account(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1251)
inline void Olk::_ContactItem::PutAccount ( _bstr_t Account ) {
    HRESULT _hr = put_Account(Account);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1252)
inline DATE Olk::_ContactItem::GetAnniversary ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Anniversary(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1253)
inline void Olk::_ContactItem::PutAnniversary ( DATE Anniversary ) {
    HRESULT _hr = put_Anniversary(Anniversary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1254)
inline _bstr_t Olk::_ContactItem::GetAssistantName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1255)
inline void Olk::_ContactItem::PutAssistantName ( _bstr_t AssistantName ) {
    HRESULT _hr = put_AssistantName(AssistantName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1256)
inline _bstr_t Olk::_ContactItem::GetAssistantTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssistantTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1257)
inline void Olk::_ContactItem::PutAssistantTelephoneNumber ( _bstr_t AssistantTelephoneNumber ) {
    HRESULT _hr = put_AssistantTelephoneNumber(AssistantTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1258)
inline DATE Olk::_ContactItem::GetBirthday ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Birthday(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1259)
inline void Olk::_ContactItem::PutBirthday ( DATE Birthday ) {
    HRESULT _hr = put_Birthday(Birthday);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1260)
inline _bstr_t Olk::_ContactItem::GetBusiness2TelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Business2TelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1261)
inline void Olk::_ContactItem::PutBusiness2TelephoneNumber ( _bstr_t Business2TelephoneNumber ) {
    HRESULT _hr = put_Business2TelephoneNumber(Business2TelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1262)
inline _bstr_t Olk::_ContactItem::GetBusinessAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1263)
inline void Olk::_ContactItem::PutBusinessAddress ( _bstr_t BusinessAddress ) {
    HRESULT _hr = put_BusinessAddress(BusinessAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1264)
inline _bstr_t Olk::_ContactItem::GetBusinessAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1265)
inline void Olk::_ContactItem::PutBusinessAddressCity ( _bstr_t BusinessAddressCity ) {
    HRESULT _hr = put_BusinessAddressCity(BusinessAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1266)
inline _bstr_t Olk::_ContactItem::GetBusinessAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1267)
inline void Olk::_ContactItem::PutBusinessAddressCountry ( _bstr_t BusinessAddressCountry ) {
    HRESULT _hr = put_BusinessAddressCountry(BusinessAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1268)
inline _bstr_t Olk::_ContactItem::GetBusinessAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1269)
inline void Olk::_ContactItem::PutBusinessAddressPostalCode ( _bstr_t BusinessAddressPostalCode ) {
    HRESULT _hr = put_BusinessAddressPostalCode(BusinessAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1270)
inline _bstr_t Olk::_ContactItem::GetBusinessAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1271)
inline void Olk::_ContactItem::PutBusinessAddressPostOfficeBox ( _bstr_t BusinessAddressPostOfficeBox ) {
    HRESULT _hr = put_BusinessAddressPostOfficeBox(BusinessAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1272)
inline _bstr_t Olk::_ContactItem::GetBusinessAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1273)
inline void Olk::_ContactItem::PutBusinessAddressState ( _bstr_t BusinessAddressState ) {
    HRESULT _hr = put_BusinessAddressState(BusinessAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1274)
inline _bstr_t Olk::_ContactItem::GetBusinessAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1275)
inline void Olk::_ContactItem::PutBusinessAddressStreet ( _bstr_t BusinessAddressStreet ) {
    HRESULT _hr = put_BusinessAddressStreet(BusinessAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1276)
inline _bstr_t Olk::_ContactItem::GetBusinessFaxNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessFaxNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1277)
inline void Olk::_ContactItem::PutBusinessFaxNumber ( _bstr_t BusinessFaxNumber ) {
    HRESULT _hr = put_BusinessFaxNumber(BusinessFaxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1278)
inline _bstr_t Olk::_ContactItem::GetBusinessHomePage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessHomePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1279)
inline void Olk::_ContactItem::PutBusinessHomePage ( _bstr_t BusinessHomePage ) {
    HRESULT _hr = put_BusinessHomePage(BusinessHomePage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline _bstr_t Olk::_ContactItem::GetBusinessTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BusinessTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1281)
inline void Olk::_ContactItem::PutBusinessTelephoneNumber ( _bstr_t BusinessTelephoneNumber ) {
    HRESULT _hr = put_BusinessTelephoneNumber(BusinessTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1282)
inline _bstr_t Olk::_ContactItem::GetCallbackTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CallbackTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1283)
inline void Olk::_ContactItem::PutCallbackTelephoneNumber ( _bstr_t CallbackTelephoneNumber ) {
    HRESULT _hr = put_CallbackTelephoneNumber(CallbackTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1284)
inline _bstr_t Olk::_ContactItem::GetCarTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CarTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1285)
inline void Olk::_ContactItem::PutCarTelephoneNumber ( _bstr_t CarTelephoneNumber ) {
    HRESULT _hr = put_CarTelephoneNumber(CarTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1286)
inline _bstr_t Olk::_ContactItem::GetChildren ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1287)
inline void Olk::_ContactItem::PutChildren ( _bstr_t Children ) {
    HRESULT _hr = put_Children(Children);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1288)
inline _bstr_t Olk::_ContactItem::GetCompanyAndFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyAndFullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1289)
inline _bstr_t Olk::_ContactItem::GetCompanyLastFirstNoSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyLastFirstNoSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1290)
inline _bstr_t Olk::_ContactItem::GetCompanyLastFirstSpaceOnly ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyLastFirstSpaceOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1291)
inline _bstr_t Olk::_ContactItem::GetCompanyMainTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyMainTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1292)
inline void Olk::_ContactItem::PutCompanyMainTelephoneNumber ( _bstr_t CompanyMainTelephoneNumber ) {
    HRESULT _hr = put_CompanyMainTelephoneNumber(CompanyMainTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1293)
inline _bstr_t Olk::_ContactItem::GetCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1294)
inline void Olk::_ContactItem::PutCompanyName ( _bstr_t CompanyName ) {
    HRESULT _hr = put_CompanyName(CompanyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1295)
inline _bstr_t Olk::_ContactItem::GetComputerNetworkName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ComputerNetworkName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1296)
inline void Olk::_ContactItem::PutComputerNetworkName ( _bstr_t ComputerNetworkName ) {
    HRESULT _hr = put_ComputerNetworkName(ComputerNetworkName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1297)
inline _bstr_t Olk::_ContactItem::GetCustomerID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CustomerID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1298)
inline void Olk::_ContactItem::PutCustomerID ( _bstr_t CustomerID ) {
    HRESULT _hr = put_CustomerID(CustomerID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline _bstr_t Olk::_ContactItem::GetDepartment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Department(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1300)
inline void Olk::_ContactItem::PutDepartment ( _bstr_t Department ) {
    HRESULT _hr = put_Department(Department);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1301)
inline _bstr_t Olk::_ContactItem::GetEmail1Address ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1302)
inline void Olk::_ContactItem::PutEmail1Address ( _bstr_t Email1Address ) {
    HRESULT _hr = put_Email1Address(Email1Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1303)
inline _bstr_t Olk::_ContactItem::GetEmail1AddressType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1304)
inline void Olk::_ContactItem::PutEmail1AddressType ( _bstr_t Email1AddressType ) {
    HRESULT _hr = put_Email1AddressType(Email1AddressType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1305)
inline _bstr_t Olk::_ContactItem::GetEmail1DisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1306)
inline _bstr_t Olk::_ContactItem::GetEmail1EntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email1EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1307)
inline _bstr_t Olk::_ContactItem::GetEmail2Address ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1308)
inline void Olk::_ContactItem::PutEmail2Address ( _bstr_t Email2Address ) {
    HRESULT _hr = put_Email2Address(Email2Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1309)
inline _bstr_t Olk::_ContactItem::GetEmail2AddressType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1310)
inline void Olk::_ContactItem::PutEmail2AddressType ( _bstr_t Email2AddressType ) {
    HRESULT _hr = put_Email2AddressType(Email2AddressType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1311)
inline _bstr_t Olk::_ContactItem::GetEmail2DisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1312)
inline _bstr_t Olk::_ContactItem::GetEmail2EntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email2EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1313)
inline _bstr_t Olk::_ContactItem::GetEmail3Address ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1314)
inline void Olk::_ContactItem::PutEmail3Address ( _bstr_t Email3Address ) {
    HRESULT _hr = put_Email3Address(Email3Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1315)
inline _bstr_t Olk::_ContactItem::GetEmail3AddressType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1316)
inline void Olk::_ContactItem::PutEmail3AddressType ( _bstr_t Email3AddressType ) {
    HRESULT _hr = put_Email3AddressType(Email3AddressType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1317)
inline _bstr_t Olk::_ContactItem::GetEmail3DisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1318)
inline _bstr_t Olk::_ContactItem::GetEmail3EntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email3EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1319)
inline _bstr_t Olk::_ContactItem::GetFileAs ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileAs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1320)
inline void Olk::_ContactItem::PutFileAs ( _bstr_t FileAs ) {
    HRESULT _hr = put_FileAs(FileAs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1321)
inline _bstr_t Olk::_ContactItem::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1322)
inline void Olk::_ContactItem::PutFirstName ( _bstr_t FirstName ) {
    HRESULT _hr = put_FirstName(FirstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1323)
inline _bstr_t Olk::_ContactItem::GetFTPSite ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FTPSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1324)
inline void Olk::_ContactItem::PutFTPSite ( _bstr_t FTPSite ) {
    HRESULT _hr = put_FTPSite(FTPSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline _bstr_t Olk::_ContactItem::GetFullName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1326)
inline void Olk::_ContactItem::PutFullName ( _bstr_t FullName ) {
    HRESULT _hr = put_FullName(FullName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1327)
inline _bstr_t Olk::_ContactItem::GetFullNameAndCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FullNameAndCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1328)
inline enum Olk::OlGender Olk::_ContactItem::GetGender ( ) {
    enum OlGender _result;
    HRESULT _hr = get_Gender(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1329)
inline void Olk::_ContactItem::PutGender ( enum OlGender Gender ) {
    HRESULT _hr = put_Gender(Gender);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1330)
inline _bstr_t Olk::_ContactItem::GetGovernmentIDNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_GovernmentIDNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1331)
inline void Olk::_ContactItem::PutGovernmentIDNumber ( _bstr_t GovernmentIDNumber ) {
    HRESULT _hr = put_GovernmentIDNumber(GovernmentIDNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1332)
inline _bstr_t Olk::_ContactItem::GetHobby ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Hobby(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1333)
inline void Olk::_ContactItem::PutHobby ( _bstr_t Hobby ) {
    HRESULT _hr = put_Hobby(Hobby);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1334)
inline _bstr_t Olk::_ContactItem::GetHome2TelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Home2TelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1335)
inline void Olk::_ContactItem::PutHome2TelephoneNumber ( _bstr_t Home2TelephoneNumber ) {
    HRESULT _hr = put_Home2TelephoneNumber(Home2TelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1336)
inline _bstr_t Olk::_ContactItem::GetHomeAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1337)
inline void Olk::_ContactItem::PutHomeAddress ( _bstr_t HomeAddress ) {
    HRESULT _hr = put_HomeAddress(HomeAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1338)
inline _bstr_t Olk::_ContactItem::GetHomeAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1339)
inline void Olk::_ContactItem::PutHomeAddressCity ( _bstr_t HomeAddressCity ) {
    HRESULT _hr = put_HomeAddressCity(HomeAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1340)
inline _bstr_t Olk::_ContactItem::GetHomeAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1341)
inline void Olk::_ContactItem::PutHomeAddressCountry ( _bstr_t HomeAddressCountry ) {
    HRESULT _hr = put_HomeAddressCountry(HomeAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1342)
inline _bstr_t Olk::_ContactItem::GetHomeAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1343)
inline void Olk::_ContactItem::PutHomeAddressPostalCode ( _bstr_t HomeAddressPostalCode ) {
    HRESULT _hr = put_HomeAddressPostalCode(HomeAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1344)
inline _bstr_t Olk::_ContactItem::GetHomeAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1345)
inline void Olk::_ContactItem::PutHomeAddressPostOfficeBox ( _bstr_t HomeAddressPostOfficeBox ) {
    HRESULT _hr = put_HomeAddressPostOfficeBox(HomeAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1346)
inline _bstr_t Olk::_ContactItem::GetHomeAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1347)
inline void Olk::_ContactItem::PutHomeAddressState ( _bstr_t HomeAddressState ) {
    HRESULT _hr = put_HomeAddressState(HomeAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1348)
inline _bstr_t Olk::_ContactItem::GetHomeAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1349)
inline void Olk::_ContactItem::PutHomeAddressStreet ( _bstr_t HomeAddressStreet ) {
    HRESULT _hr = put_HomeAddressStreet(HomeAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1350)
inline _bstr_t Olk::_ContactItem::GetHomeFaxNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeFaxNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1351)
inline void Olk::_ContactItem::PutHomeFaxNumber ( _bstr_t HomeFaxNumber ) {
    HRESULT _hr = put_HomeFaxNumber(HomeFaxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1352)
inline _bstr_t Olk::_ContactItem::GetHomeTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HomeTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1353)
inline void Olk::_ContactItem::PutHomeTelephoneNumber ( _bstr_t HomeTelephoneNumber ) {
    HRESULT _hr = put_HomeTelephoneNumber(HomeTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1354)
inline _bstr_t Olk::_ContactItem::GetInitials ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Initials(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1355)
inline void Olk::_ContactItem::PutInitials ( _bstr_t Initials ) {
    HRESULT _hr = put_Initials(Initials);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1356)
inline _bstr_t Olk::_ContactItem::GetInternetFreeBusyAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InternetFreeBusyAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1357)
inline void Olk::_ContactItem::PutInternetFreeBusyAddress ( _bstr_t InternetFreeBusyAddress ) {
    HRESULT _hr = put_InternetFreeBusyAddress(InternetFreeBusyAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1358)
inline _bstr_t Olk::_ContactItem::GetISDNNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ISDNNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1359)
inline void Olk::_ContactItem::PutISDNNumber ( _bstr_t ISDNNumber ) {
    HRESULT _hr = put_ISDNNumber(ISDNNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1360)
inline _bstr_t Olk::_ContactItem::GetJobTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_JobTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1361)
inline void Olk::_ContactItem::PutJobTitle ( _bstr_t JobTitle ) {
    HRESULT _hr = put_JobTitle(JobTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1362)
inline VARIANT_BOOL Olk::_ContactItem::GetJournal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Journal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1363)
inline void Olk::_ContactItem::PutJournal ( VARIANT_BOOL Journal ) {
    HRESULT _hr = put_Journal(Journal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1364)
inline _bstr_t Olk::_ContactItem::GetLanguage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1365)
inline void Olk::_ContactItem::PutLanguage ( _bstr_t Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1366)
inline _bstr_t Olk::_ContactItem::GetLastFirstAndSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstAndSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1367)
inline _bstr_t Olk::_ContactItem::GetLastFirstNoSpace ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstNoSpace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1368)
inline _bstr_t Olk::_ContactItem::GetLastFirstNoSpaceCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstNoSpaceCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1369)
inline _bstr_t Olk::_ContactItem::GetLastFirstSpaceOnly ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstSpaceOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1370)
inline _bstr_t Olk::_ContactItem::GetLastFirstSpaceOnlyCompany ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstSpaceOnlyCompany(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1371)
inline _bstr_t Olk::_ContactItem::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1372)
inline void Olk::_ContactItem::PutLastName ( _bstr_t LastName ) {
    HRESULT _hr = put_LastName(LastName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1373)
inline _bstr_t Olk::_ContactItem::GetLastNameAndFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastNameAndFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1374)
inline _bstr_t Olk::_ContactItem::GetMailingAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1375)
inline void Olk::_ContactItem::PutMailingAddress ( _bstr_t MailingAddress ) {
    HRESULT _hr = put_MailingAddress(MailingAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1376)
inline _bstr_t Olk::_ContactItem::GetMailingAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1377)
inline void Olk::_ContactItem::PutMailingAddressCity ( _bstr_t MailingAddressCity ) {
    HRESULT _hr = put_MailingAddressCity(MailingAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1378)
inline _bstr_t Olk::_ContactItem::GetMailingAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1379)
inline void Olk::_ContactItem::PutMailingAddressCountry ( _bstr_t MailingAddressCountry ) {
    HRESULT _hr = put_MailingAddressCountry(MailingAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1380)
inline _bstr_t Olk::_ContactItem::GetMailingAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1381)
inline void Olk::_ContactItem::PutMailingAddressPostalCode ( _bstr_t MailingAddressPostalCode ) {
    HRESULT _hr = put_MailingAddressPostalCode(MailingAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1382)
inline _bstr_t Olk::_ContactItem::GetMailingAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1383)
inline void Olk::_ContactItem::PutMailingAddressPostOfficeBox ( _bstr_t MailingAddressPostOfficeBox ) {
    HRESULT _hr = put_MailingAddressPostOfficeBox(MailingAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1384)
inline _bstr_t Olk::_ContactItem::GetMailingAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1385)
inline void Olk::_ContactItem::PutMailingAddressState ( _bstr_t MailingAddressState ) {
    HRESULT _hr = put_MailingAddressState(MailingAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1386)
inline _bstr_t Olk::_ContactItem::GetMailingAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MailingAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1387)
inline void Olk::_ContactItem::PutMailingAddressStreet ( _bstr_t MailingAddressStreet ) {
    HRESULT _hr = put_MailingAddressStreet(MailingAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1388)
inline _bstr_t Olk::_ContactItem::GetManagerName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ManagerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1389)
inline void Olk::_ContactItem::PutManagerName ( _bstr_t ManagerName ) {
    HRESULT _hr = put_ManagerName(ManagerName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1390)
inline _bstr_t Olk::_ContactItem::GetMiddleName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MiddleName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1391)
inline void Olk::_ContactItem::PutMiddleName ( _bstr_t MiddleName ) {
    HRESULT _hr = put_MiddleName(MiddleName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1392)
inline _bstr_t Olk::_ContactItem::GetMobileTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MobileTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1393)
inline void Olk::_ContactItem::PutMobileTelephoneNumber ( _bstr_t MobileTelephoneNumber ) {
    HRESULT _hr = put_MobileTelephoneNumber(MobileTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1394)
inline _bstr_t Olk::_ContactItem::GetNetMeetingAlias ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingAlias(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1395)
inline void Olk::_ContactItem::PutNetMeetingAlias ( _bstr_t NetMeetingAlias ) {
    HRESULT _hr = put_NetMeetingAlias(NetMeetingAlias);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1396)
inline _bstr_t Olk::_ContactItem::GetNetMeetingServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NetMeetingServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1397)
inline void Olk::_ContactItem::PutNetMeetingServer ( _bstr_t NetMeetingServer ) {
    HRESULT _hr = put_NetMeetingServer(NetMeetingServer);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1398)
inline _bstr_t Olk::_ContactItem::GetNickName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NickName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1399)
inline void Olk::_ContactItem::PutNickName ( _bstr_t NickName ) {
    HRESULT _hr = put_NickName(NickName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1400)
inline _bstr_t Olk::_ContactItem::GetOfficeLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OfficeLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1401)
inline void Olk::_ContactItem::PutOfficeLocation ( _bstr_t OfficeLocation ) {
    HRESULT _hr = put_OfficeLocation(OfficeLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1402)
inline _bstr_t Olk::_ContactItem::GetOrganizationalIDNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OrganizationalIDNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1403)
inline void Olk::_ContactItem::PutOrganizationalIDNumber ( _bstr_t OrganizationalIDNumber ) {
    HRESULT _hr = put_OrganizationalIDNumber(OrganizationalIDNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1404)
inline _bstr_t Olk::_ContactItem::GetOtherAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1405)
inline void Olk::_ContactItem::PutOtherAddress ( _bstr_t OtherAddress ) {
    HRESULT _hr = put_OtherAddress(OtherAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1406)
inline _bstr_t Olk::_ContactItem::GetOtherAddressCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1407)
inline void Olk::_ContactItem::PutOtherAddressCity ( _bstr_t OtherAddressCity ) {
    HRESULT _hr = put_OtherAddressCity(OtherAddressCity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1408)
inline _bstr_t Olk::_ContactItem::GetOtherAddressCountry ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressCountry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1409)
inline void Olk::_ContactItem::PutOtherAddressCountry ( _bstr_t OtherAddressCountry ) {
    HRESULT _hr = put_OtherAddressCountry(OtherAddressCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1410)
inline _bstr_t Olk::_ContactItem::GetOtherAddressPostalCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressPostalCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1411)
inline void Olk::_ContactItem::PutOtherAddressPostalCode ( _bstr_t OtherAddressPostalCode ) {
    HRESULT _hr = put_OtherAddressPostalCode(OtherAddressPostalCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1412)
inline _bstr_t Olk::_ContactItem::GetOtherAddressPostOfficeBox ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressPostOfficeBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1413)
inline void Olk::_ContactItem::PutOtherAddressPostOfficeBox ( _bstr_t OtherAddressPostOfficeBox ) {
    HRESULT _hr = put_OtherAddressPostOfficeBox(OtherAddressPostOfficeBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1414)
inline _bstr_t Olk::_ContactItem::GetOtherAddressState ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1415)
inline void Olk::_ContactItem::PutOtherAddressState ( _bstr_t OtherAddressState ) {
    HRESULT _hr = put_OtherAddressState(OtherAddressState);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1416)
inline _bstr_t Olk::_ContactItem::GetOtherAddressStreet ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherAddressStreet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1417)
inline void Olk::_ContactItem::PutOtherAddressStreet ( _bstr_t OtherAddressStreet ) {
    HRESULT _hr = put_OtherAddressStreet(OtherAddressStreet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1418)
inline _bstr_t Olk::_ContactItem::GetOtherFaxNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherFaxNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1419)
inline void Olk::_ContactItem::PutOtherFaxNumber ( _bstr_t OtherFaxNumber ) {
    HRESULT _hr = put_OtherFaxNumber(OtherFaxNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline _bstr_t Olk::_ContactItem::GetOtherTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OtherTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1421)
inline void Olk::_ContactItem::PutOtherTelephoneNumber ( _bstr_t OtherTelephoneNumber ) {
    HRESULT _hr = put_OtherTelephoneNumber(OtherTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1422)
inline _bstr_t Olk::_ContactItem::GetPagerNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PagerNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1423)
inline void Olk::_ContactItem::PutPagerNumber ( _bstr_t PagerNumber ) {
    HRESULT _hr = put_PagerNumber(PagerNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1424)
inline _bstr_t Olk::_ContactItem::GetPersonalHomePage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PersonalHomePage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1425)
inline void Olk::_ContactItem::PutPersonalHomePage ( _bstr_t PersonalHomePage ) {
    HRESULT _hr = put_PersonalHomePage(PersonalHomePage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1426)
inline _bstr_t Olk::_ContactItem::GetPrimaryTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PrimaryTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1427)
inline void Olk::_ContactItem::PutPrimaryTelephoneNumber ( _bstr_t PrimaryTelephoneNumber ) {
    HRESULT _hr = put_PrimaryTelephoneNumber(PrimaryTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1428)
inline _bstr_t Olk::_ContactItem::GetProfession ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Profession(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1429)
inline void Olk::_ContactItem::PutProfession ( _bstr_t Profession ) {
    HRESULT _hr = put_Profession(Profession);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1430)
inline _bstr_t Olk::_ContactItem::GetRadioTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RadioTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1431)
inline void Olk::_ContactItem::PutRadioTelephoneNumber ( _bstr_t RadioTelephoneNumber ) {
    HRESULT _hr = put_RadioTelephoneNumber(RadioTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1432)
inline _bstr_t Olk::_ContactItem::GetReferredBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReferredBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1433)
inline void Olk::_ContactItem::PutReferredBy ( _bstr_t ReferredBy ) {
    HRESULT _hr = put_ReferredBy(ReferredBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1434)
inline enum Olk::OlMailingAddress Olk::_ContactItem::GetSelectedMailingAddress ( ) {
    enum OlMailingAddress _result;
    HRESULT _hr = get_SelectedMailingAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1435)
inline void Olk::_ContactItem::PutSelectedMailingAddress ( enum OlMailingAddress SelectedMailingAddress ) {
    HRESULT _hr = put_SelectedMailingAddress(SelectedMailingAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1436)
inline _bstr_t Olk::_ContactItem::GetSpouse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Spouse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1437)
inline void Olk::_ContactItem::PutSpouse ( _bstr_t Spouse ) {
    HRESULT _hr = put_Spouse(Spouse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1438)
inline _bstr_t Olk::_ContactItem::GetSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Suffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1439)
inline void Olk::_ContactItem::PutSuffix ( _bstr_t Suffix ) {
    HRESULT _hr = put_Suffix(Suffix);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1440)
inline _bstr_t Olk::_ContactItem::GetTelexNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TelexNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1441)
inline void Olk::_ContactItem::PutTelexNumber ( _bstr_t TelexNumber ) {
    HRESULT _hr = put_TelexNumber(TelexNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1442)
inline _bstr_t Olk::_ContactItem::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1443)
inline void Olk::_ContactItem::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1444)
inline _bstr_t Olk::_ContactItem::GetTTYTDDTelephoneNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TTYTDDTelephoneNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1445)
inline void Olk::_ContactItem::PutTTYTDDTelephoneNumber ( _bstr_t TTYTDDTelephoneNumber ) {
    HRESULT _hr = put_TTYTDDTelephoneNumber(TTYTDDTelephoneNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1446)
inline _bstr_t Olk::_ContactItem::GetUser1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1447)
inline void Olk::_ContactItem::PutUser1 ( _bstr_t User1 ) {
    HRESULT _hr = put_User1(User1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1448)
inline _bstr_t Olk::_ContactItem::GetUser2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1449)
inline void Olk::_ContactItem::PutUser2 ( _bstr_t User2 ) {
    HRESULT _hr = put_User2(User2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1450)
inline _bstr_t Olk::_ContactItem::GetUser3 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User3(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1451)
inline void Olk::_ContactItem::PutUser3 ( _bstr_t User3 ) {
    HRESULT _hr = put_User3(User3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1452)
inline _bstr_t Olk::_ContactItem::GetUser4 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_User4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1453)
inline void Olk::_ContactItem::PutUser4 ( _bstr_t User4 ) {
    HRESULT _hr = put_User4(User4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1454)
inline _bstr_t Olk::_ContactItem::GetUserCertificate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1455)
inline void Olk::_ContactItem::PutUserCertificate ( _bstr_t UserCertificate ) {
    HRESULT _hr = put_UserCertificate(UserCertificate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1456)
inline _bstr_t Olk::_ContactItem::GetWebPage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WebPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1457)
inline void Olk::_ContactItem::PutWebPage ( _bstr_t WebPage ) {
    HRESULT _hr = put_WebPage(WebPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1458)
inline _bstr_t Olk::_ContactItem::GetYomiCompanyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiCompanyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1459)
inline void Olk::_ContactItem::PutYomiCompanyName ( _bstr_t YomiCompanyName ) {
    HRESULT _hr = put_YomiCompanyName(YomiCompanyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1460)
inline _bstr_t Olk::_ContactItem::GetYomiFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1461)
inline void Olk::_ContactItem::PutYomiFirstName ( _bstr_t YomiFirstName ) {
    HRESULT _hr = put_YomiFirstName(YomiFirstName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1462)
inline _bstr_t Olk::_ContactItem::GetYomiLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_YomiLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1463)
inline void Olk::_ContactItem::PutYomiLastName ( _bstr_t YomiLastName ) {
    HRESULT _hr = put_YomiLastName(YomiLastName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1464)
inline Olk::_MailItemPtr Olk::_ContactItem::ForwardAsVcard ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ForwardAsVcard(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1465)
inline Olk::LinksPtr Olk::_ContactItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1466)
inline Olk::ItemPropertiesPtr Olk::_ContactItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1467)
inline _bstr_t Olk::_ContactItem::GetLastFirstNoSpaceAndSuffix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastFirstNoSpaceAndSuffix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1468)
inline enum Olk::OlDownloadState Olk::_ContactItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1469)
inline HRESULT Olk::_ContactItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1470)
inline _bstr_t Olk::_ContactItem::GetIMAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1471)
inline void Olk::_ContactItem::PutIMAddress ( _bstr_t IMAddress ) {
    HRESULT _hr = put_IMAddress(IMAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1472)
inline enum Olk::OlRemoteStatus Olk::_ContactItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1473)
inline void Olk::_ContactItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1474)
inline void Olk::_ContactItem::PutEmail1DisplayName ( _bstr_t Email1DisplayName ) {
    HRESULT _hr = put_Email1DisplayName(Email1DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1475)
inline void Olk::_ContactItem::PutEmail2DisplayName ( _bstr_t Email2DisplayName ) {
    HRESULT _hr = put_Email2DisplayName(Email2DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1476)
inline void Olk::_ContactItem::PutEmail3DisplayName ( _bstr_t Email3DisplayName ) {
    HRESULT _hr = put_Email3DisplayName(Email3DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline VARIANT_BOOL Olk::_ContactItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1478)
inline VARIANT_BOOL Olk::_ContactItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1479)
inline Olk::ConflictsPtr Olk::_ContactItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(1480)
inline HRESULT Olk::_ContactItem::AddPicture ( _bstr_t Path ) {
    HRESULT _hr = raw_AddPicture(Path);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1481)
inline HRESULT Olk::_ContactItem::RemovePicture ( ) {
    HRESULT _hr = raw_RemovePicture();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1482)
inline VARIANT_BOOL Olk::_ContactItem::GetHasPicture ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _DistListItem wrapper method implementations
//

#pragma implementation_key(1483)
inline Olk::_ApplicationPtr Olk::_DistListItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1484)
inline enum Olk::OlObjectClass Olk::_DistListItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1485)
inline Olk::_NameSpacePtr Olk::_DistListItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1486)
inline IDispatchPtr Olk::_DistListItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1487)
inline Olk::ActionsPtr Olk::_DistListItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1488)
inline Olk::AttachmentsPtr Olk::_DistListItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1489)
inline _bstr_t Olk::_DistListItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1490)
inline void Olk::_DistListItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1491)
inline _bstr_t Olk::_DistListItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1492)
inline void Olk::_DistListItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1493)
inline _bstr_t Olk::_DistListItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1494)
inline void Olk::_DistListItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline _bstr_t Olk::_DistListItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1496)
inline void Olk::_DistListItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1497)
inline _bstr_t Olk::_DistListItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1498)
inline _bstr_t Olk::_DistListItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1499)
inline DATE Olk::_DistListItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline _bstr_t Olk::_DistListItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1501)
inline Olk::FormDescriptionPtr Olk::_DistListItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1502)
inline Olk::_InspectorPtr Olk::_DistListItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1503)
inline enum Olk::OlImportance Olk::_DistListItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1504)
inline void Olk::_DistListItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1505)
inline DATE Olk::_DistListItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1506)
inline IUnknownPtr Olk::_DistListItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1507)
inline _bstr_t Olk::_DistListItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1508)
inline void Olk::_DistListItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1509)
inline _bstr_t Olk::_DistListItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1510)
inline void Olk::_DistListItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1511)
inline VARIANT_BOOL Olk::_DistListItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline void Olk::_DistListItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1513)
inline long Olk::_DistListItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1514)
inline _bstr_t Olk::_DistListItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1515)
inline VARIANT_BOOL Olk::_DistListItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1516)
inline enum Olk::OlSensitivity Olk::_DistListItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1517)
inline void Olk::_DistListItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1518)
inline long Olk::_DistListItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1519)
inline _bstr_t Olk::_DistListItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1520)
inline void Olk::_DistListItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1521)
inline VARIANT_BOOL Olk::_DistListItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline void Olk::_DistListItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1523)
inline Olk::UserPropertiesPtr Olk::_DistListItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1524)
inline HRESULT Olk::_DistListItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1525)
inline IDispatchPtr Olk::_DistListItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1526)
inline HRESULT Olk::_DistListItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1527)
inline HRESULT Olk::_DistListItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1528)
inline IDispatchPtr Olk::_DistListItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1529)
inline HRESULT Olk::_DistListItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1530)
inline HRESULT Olk::_DistListItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1531)
inline HRESULT Olk::_DistListItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1532)
inline _bstr_t Olk::_DistListItem::GetDLName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DLName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1533)
inline void Olk::_DistListItem::PutDLName ( _bstr_t DLName ) {
    HRESULT _hr = put_DLName(DLName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1534)
inline long Olk::_DistListItem::GetMemberCount ( ) {
    long _result = 0;
    HRESULT _hr = get_MemberCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1535)
inline long Olk::_DistListItem::GetCheckSum ( ) {
    long _result = 0;
    HRESULT _hr = get_CheckSum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1536)
inline _variant_t Olk::_DistListItem::GetMembers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1537)
inline void Olk::_DistListItem::PutMembers ( const _variant_t & Members ) {
    HRESULT _hr = put_Members(Members);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1538)
inline _variant_t Olk::_DistListItem::GetOneOffMembers ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OneOffMembers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1539)
inline void Olk::_DistListItem::PutOneOffMembers ( const _variant_t & OneOffMembers ) {
    HRESULT _hr = put_OneOffMembers(OneOffMembers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1540)
inline Olk::LinksPtr Olk::_DistListItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1541)
inline HRESULT Olk::_DistListItem::AddMembers ( struct Recipients * Recipients ) {
    HRESULT _hr = raw_AddMembers(Recipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1542)
inline HRESULT Olk::_DistListItem::RemoveMembers ( struct Recipients * Recipients ) {
    HRESULT _hr = raw_RemoveMembers(Recipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1543)
inline Olk::RecipientPtr Olk::_DistListItem::GetMember ( long Index ) {
    struct Recipient * _result = 0;
    HRESULT _hr = raw_GetMember(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientPtr(_result, false);
}

#pragma implementation_key(1544)
inline enum Olk::OlDownloadState Olk::_DistListItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1545)
inline HRESULT Olk::_DistListItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1546)
inline HRESULT Olk::_DistListItem::AddMember ( struct Recipient * Recipient ) {
    HRESULT _hr = raw_AddMember(Recipient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1547)
inline HRESULT Olk::_DistListItem::RemoveMember ( struct Recipient * Recipient ) {
    HRESULT _hr = raw_RemoveMember(Recipient);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1548)
inline Olk::ItemPropertiesPtr Olk::_DistListItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1549)
inline enum Olk::OlRemoteStatus Olk::_DistListItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1550)
inline void Olk::_DistListItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1551)
inline VARIANT_BOOL Olk::_DistListItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline VARIANT_BOOL Olk::_DistListItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1553)
inline Olk::ConflictsPtr Olk::_DistListItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _DocumentItem wrapper method implementations
//

#pragma implementation_key(1554)
inline Olk::_ApplicationPtr Olk::_DocumentItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1555)
inline enum Olk::OlObjectClass Olk::_DocumentItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1556)
inline Olk::_NameSpacePtr Olk::_DocumentItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1557)
inline IDispatchPtr Olk::_DocumentItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1558)
inline Olk::ActionsPtr Olk::_DocumentItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1559)
inline Olk::AttachmentsPtr Olk::_DocumentItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1560)
inline _bstr_t Olk::_DocumentItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1561)
inline void Olk::_DocumentItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1562)
inline _bstr_t Olk::_DocumentItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1563)
inline void Olk::_DocumentItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1564)
inline _bstr_t Olk::_DocumentItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1565)
inline void Olk::_DocumentItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1566)
inline _bstr_t Olk::_DocumentItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1567)
inline void Olk::_DocumentItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1568)
inline _bstr_t Olk::_DocumentItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1569)
inline _bstr_t Olk::_DocumentItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1570)
inline DATE Olk::_DocumentItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1571)
inline _bstr_t Olk::_DocumentItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1572)
inline Olk::FormDescriptionPtr Olk::_DocumentItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1573)
inline Olk::_InspectorPtr Olk::_DocumentItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1574)
inline enum Olk::OlImportance Olk::_DocumentItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1575)
inline void Olk::_DocumentItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1576)
inline DATE Olk::_DocumentItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1577)
inline IUnknownPtr Olk::_DocumentItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1578)
inline _bstr_t Olk::_DocumentItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1579)
inline void Olk::_DocumentItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1580)
inline _bstr_t Olk::_DocumentItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1581)
inline void Olk::_DocumentItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1582)
inline VARIANT_BOOL Olk::_DocumentItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1583)
inline void Olk::_DocumentItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1584)
inline long Olk::_DocumentItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1585)
inline _bstr_t Olk::_DocumentItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1586)
inline VARIANT_BOOL Olk::_DocumentItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1587)
inline enum Olk::OlSensitivity Olk::_DocumentItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1588)
inline void Olk::_DocumentItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1589)
inline long Olk::_DocumentItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1590)
inline _bstr_t Olk::_DocumentItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1591)
inline void Olk::_DocumentItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1592)
inline VARIANT_BOOL Olk::_DocumentItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1593)
inline void Olk::_DocumentItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1594)
inline Olk::UserPropertiesPtr Olk::_DocumentItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1595)
inline HRESULT Olk::_DocumentItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1596)
inline IDispatchPtr Olk::_DocumentItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1597)
inline HRESULT Olk::_DocumentItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1598)
inline HRESULT Olk::_DocumentItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1599)
inline IDispatchPtr Olk::_DocumentItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1600)
inline HRESULT Olk::_DocumentItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1601)
inline HRESULT Olk::_DocumentItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1602)
inline HRESULT Olk::_DocumentItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1603)
inline Olk::LinksPtr Olk::_DocumentItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1604)
inline enum Olk::OlDownloadState Olk::_DocumentItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1605)
inline HRESULT Olk::_DocumentItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1606)
inline Olk::ItemPropertiesPtr Olk::_DocumentItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1607)
inline enum Olk::OlRemoteStatus Olk::_DocumentItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1608)
inline void Olk::_DocumentItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1609)
inline VARIANT_BOOL Olk::_DocumentItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1610)
inline VARIANT_BOOL Olk::_DocumentItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1611)
inline Olk::ConflictsPtr Olk::_DocumentItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _JournalItem wrapper method implementations
//

#pragma implementation_key(1612)
inline Olk::_ApplicationPtr Olk::_JournalItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1613)
inline enum Olk::OlObjectClass Olk::_JournalItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1614)
inline Olk::_NameSpacePtr Olk::_JournalItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1615)
inline IDispatchPtr Olk::_JournalItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1616)
inline Olk::ActionsPtr Olk::_JournalItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1617)
inline Olk::AttachmentsPtr Olk::_JournalItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1618)
inline _bstr_t Olk::_JournalItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1619)
inline void Olk::_JournalItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1620)
inline _bstr_t Olk::_JournalItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1621)
inline void Olk::_JournalItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1622)
inline _bstr_t Olk::_JournalItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1623)
inline void Olk::_JournalItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1624)
inline _bstr_t Olk::_JournalItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1625)
inline void Olk::_JournalItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1626)
inline _bstr_t Olk::_JournalItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1627)
inline _bstr_t Olk::_JournalItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1628)
inline DATE Olk::_JournalItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1629)
inline _bstr_t Olk::_JournalItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1630)
inline Olk::FormDescriptionPtr Olk::_JournalItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1631)
inline Olk::_InspectorPtr Olk::_JournalItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1632)
inline enum Olk::OlImportance Olk::_JournalItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1633)
inline void Olk::_JournalItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1634)
inline DATE Olk::_JournalItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1635)
inline IUnknownPtr Olk::_JournalItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1636)
inline _bstr_t Olk::_JournalItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1637)
inline void Olk::_JournalItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1638)
inline _bstr_t Olk::_JournalItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1639)
inline void Olk::_JournalItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1640)
inline VARIANT_BOOL Olk::_JournalItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1641)
inline void Olk::_JournalItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1642)
inline long Olk::_JournalItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1643)
inline _bstr_t Olk::_JournalItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1644)
inline VARIANT_BOOL Olk::_JournalItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1645)
inline enum Olk::OlSensitivity Olk::_JournalItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1646)
inline void Olk::_JournalItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1647)
inline long Olk::_JournalItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline _bstr_t Olk::_JournalItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1649)
inline void Olk::_JournalItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1650)
inline VARIANT_BOOL Olk::_JournalItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1651)
inline void Olk::_JournalItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1652)
inline Olk::UserPropertiesPtr Olk::_JournalItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1653)
inline HRESULT Olk::_JournalItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1654)
inline IDispatchPtr Olk::_JournalItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1655)
inline HRESULT Olk::_JournalItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1656)
inline HRESULT Olk::_JournalItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1657)
inline IDispatchPtr Olk::_JournalItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1658)
inline HRESULT Olk::_JournalItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1659)
inline HRESULT Olk::_JournalItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1660)
inline HRESULT Olk::_JournalItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1661)
inline _bstr_t Olk::_JournalItem::GetContactNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContactNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1662)
inline void Olk::_JournalItem::PutContactNames ( _bstr_t ContactNames ) {
    HRESULT _hr = put_ContactNames(ContactNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1663)
inline VARIANT_BOOL Olk::_JournalItem::GetDocPosted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocPosted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1664)
inline void Olk::_JournalItem::PutDocPosted ( VARIANT_BOOL DocPosted ) {
    HRESULT _hr = put_DocPosted(DocPosted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1665)
inline VARIANT_BOOL Olk::_JournalItem::GetDocPrinted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocPrinted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1666)
inline void Olk::_JournalItem::PutDocPrinted ( VARIANT_BOOL DocPrinted ) {
    HRESULT _hr = put_DocPrinted(DocPrinted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1667)
inline VARIANT_BOOL Olk::_JournalItem::GetDocRouted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocRouted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1668)
inline void Olk::_JournalItem::PutDocRouted ( VARIANT_BOOL DocRouted ) {
    HRESULT _hr = put_DocRouted(DocRouted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1669)
inline VARIANT_BOOL Olk::_JournalItem::GetDocSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DocSaved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1670)
inline void Olk::_JournalItem::PutDocSaved ( VARIANT_BOOL DocSaved ) {
    HRESULT _hr = put_DocSaved(DocSaved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1671)
inline long Olk::_JournalItem::GetDuration ( ) {
    long _result = 0;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1672)
inline void Olk::_JournalItem::PutDuration ( long Duration ) {
    HRESULT _hr = put_Duration(Duration);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1673)
inline DATE Olk::_JournalItem::GetEnd ( ) {
    DATE _result = 0;
    HRESULT _hr = get_End(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1674)
inline void Olk::_JournalItem::PutEnd ( DATE End ) {
    HRESULT _hr = put_End(End);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1675)
inline _bstr_t Olk::_JournalItem::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1676)
inline void Olk::_JournalItem::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1677)
inline Olk::RecipientsPtr Olk::_JournalItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(1678)
inline DATE Olk::_JournalItem::GetStart ( ) {
    DATE _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1679)
inline void Olk::_JournalItem::PutStart ( DATE Start ) {
    HRESULT _hr = put_Start(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1680)
inline Olk::_MailItemPtr Olk::_JournalItem::Forward ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1681)
inline Olk::_MailItemPtr Olk::_JournalItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1682)
inline Olk::_MailItemPtr Olk::_JournalItem::ReplyAll ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_ReplyAll(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1683)
inline HRESULT Olk::_JournalItem::StartTimer ( ) {
    HRESULT _hr = raw_StartTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1684)
inline HRESULT Olk::_JournalItem::StopTimer ( ) {
    HRESULT _hr = raw_StopTimer();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1685)
inline Olk::LinksPtr Olk::_JournalItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1686)
inline enum Olk::OlDownloadState Olk::_JournalItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline HRESULT Olk::_JournalItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1688)
inline Olk::ItemPropertiesPtr Olk::_JournalItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1689)
inline enum Olk::OlRemoteStatus Olk::_JournalItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1690)
inline void Olk::_JournalItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1691)
inline VARIANT_BOOL Olk::_JournalItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1692)
inline VARIANT_BOOL Olk::_JournalItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1693)
inline Olk::ConflictsPtr Olk::_JournalItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _NoteItem wrapper method implementations
//

#pragma implementation_key(1694)
inline Olk::_ApplicationPtr Olk::_NoteItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1695)
inline enum Olk::OlObjectClass Olk::_NoteItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1696)
inline Olk::_NameSpacePtr Olk::_NoteItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1697)
inline IDispatchPtr Olk::_NoteItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1698)
inline _bstr_t Olk::_NoteItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1699)
inline void Olk::_NoteItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1700)
inline _bstr_t Olk::_NoteItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1701)
inline void Olk::_NoteItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1702)
inline enum Olk::OlNoteColor Olk::_NoteItem::GetColor ( ) {
    enum OlNoteColor _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1703)
inline void Olk::_NoteItem::PutColor ( enum OlNoteColor Color ) {
    HRESULT _hr = put_Color(Color);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1704)
inline DATE Olk::_NoteItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1705)
inline _bstr_t Olk::_NoteItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1706)
inline Olk::_InspectorPtr Olk::_NoteItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1707)
inline long Olk::_NoteItem::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline void Olk::_NoteItem::PutHeight ( long Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1709)
inline DATE Olk::_NoteItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1710)
inline long Olk::_NoteItem::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1711)
inline void Olk::_NoteItem::PutLeft ( long Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1712)
inline _bstr_t Olk::_NoteItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1713)
inline void Olk::_NoteItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1714)
inline VARIANT_BOOL Olk::_NoteItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1715)
inline long Olk::_NoteItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1716)
inline _bstr_t Olk::_NoteItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1717)
inline long Olk::_NoteItem::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline void Olk::_NoteItem::PutTop ( long Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline long Olk::_NoteItem::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1720)
inline void Olk::_NoteItem::PutWidth ( long Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1721)
inline HRESULT Olk::_NoteItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1722)
inline IDispatchPtr Olk::_NoteItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1723)
inline HRESULT Olk::_NoteItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1724)
inline HRESULT Olk::_NoteItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1725)
inline IDispatchPtr Olk::_NoteItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1726)
inline HRESULT Olk::_NoteItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1727)
inline HRESULT Olk::_NoteItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1728)
inline HRESULT Olk::_NoteItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1729)
inline Olk::LinksPtr Olk::_NoteItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1730)
inline enum Olk::OlDownloadState Olk::_NoteItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline Olk::ItemPropertiesPtr Olk::_NoteItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1732)
inline enum Olk::OlRemoteStatus Olk::_NoteItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1733)
inline void Olk::_NoteItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1734)
inline VARIANT_BOOL Olk::_NoteItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1735)
inline VARIANT_BOOL Olk::_NoteItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1736)
inline Olk::ConflictsPtr Olk::_NoteItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _PostItem wrapper method implementations
//

#pragma implementation_key(1737)
inline Olk::_ApplicationPtr Olk::_PostItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1738)
inline enum Olk::OlObjectClass Olk::_PostItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1739)
inline Olk::_NameSpacePtr Olk::_PostItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1740)
inline IDispatchPtr Olk::_PostItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1741)
inline Olk::ActionsPtr Olk::_PostItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1742)
inline Olk::AttachmentsPtr Olk::_PostItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1743)
inline _bstr_t Olk::_PostItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1744)
inline void Olk::_PostItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline _bstr_t Olk::_PostItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1746)
inline void Olk::_PostItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1747)
inline _bstr_t Olk::_PostItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1748)
inline void Olk::_PostItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline _bstr_t Olk::_PostItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1750)
inline void Olk::_PostItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline _bstr_t Olk::_PostItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1752)
inline _bstr_t Olk::_PostItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1753)
inline DATE Olk::_PostItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1754)
inline _bstr_t Olk::_PostItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1755)
inline Olk::FormDescriptionPtr Olk::_PostItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1756)
inline Olk::_InspectorPtr Olk::_PostItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1757)
inline enum Olk::OlImportance Olk::_PostItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1758)
inline void Olk::_PostItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1759)
inline DATE Olk::_PostItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1760)
inline IUnknownPtr Olk::_PostItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1761)
inline _bstr_t Olk::_PostItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1762)
inline void Olk::_PostItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1763)
inline _bstr_t Olk::_PostItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1764)
inline void Olk::_PostItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1765)
inline VARIANT_BOOL Olk::_PostItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1766)
inline void Olk::_PostItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1767)
inline long Olk::_PostItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline _bstr_t Olk::_PostItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1769)
inline VARIANT_BOOL Olk::_PostItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline enum Olk::OlSensitivity Olk::_PostItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1771)
inline void Olk::_PostItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1772)
inline long Olk::_PostItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1773)
inline _bstr_t Olk::_PostItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1774)
inline void Olk::_PostItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1775)
inline VARIANT_BOOL Olk::_PostItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline void Olk::_PostItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1777)
inline Olk::UserPropertiesPtr Olk::_PostItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1778)
inline HRESULT Olk::_PostItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1779)
inline IDispatchPtr Olk::_PostItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1780)
inline HRESULT Olk::_PostItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1781)
inline HRESULT Olk::_PostItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1782)
inline IDispatchPtr Olk::_PostItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1783)
inline HRESULT Olk::_PostItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1784)
inline HRESULT Olk::_PostItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1785)
inline HRESULT Olk::_PostItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1786)
inline DATE Olk::_PostItem::GetExpiryTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ExpiryTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1787)
inline void Olk::_PostItem::PutExpiryTime ( DATE ExpiryTime ) {
    HRESULT _hr = put_ExpiryTime(ExpiryTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1788)
inline _bstr_t Olk::_PostItem::GetHTMLBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTMLBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1789)
inline void Olk::_PostItem::PutHTMLBody ( _bstr_t HTMLBody ) {
    HRESULT _hr = put_HTMLBody(HTMLBody);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1790)
inline DATE Olk::_PostItem::GetReceivedTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReceivedTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1791)
inline _bstr_t Olk::_PostItem::GetSenderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1792)
inline DATE Olk::_PostItem::GetSentOn ( ) {
    DATE _result = 0;
    HRESULT _hr = get_SentOn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1793)
inline HRESULT Olk::_PostItem::ClearConversationIndex ( ) {
    HRESULT _hr = raw_ClearConversationIndex();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1794)
inline Olk::_MailItemPtr Olk::_PostItem::Forward ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1795)
inline HRESULT Olk::_PostItem::Post ( ) {
    HRESULT _hr = raw_Post();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1796)
inline Olk::_MailItemPtr Olk::_PostItem::Reply ( ) {
    struct _MailItem * _result = 0;
    HRESULT _hr = raw_Reply(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _MailItemPtr(_result, false);
}

#pragma implementation_key(1797)
inline Olk::LinksPtr Olk::_PostItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1798)
inline Olk::ItemPropertiesPtr Olk::_PostItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1799)
inline enum Olk::OlBodyFormat Olk::_PostItem::GetBodyFormat ( ) {
    enum OlBodyFormat _result;
    HRESULT _hr = get_BodyFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1800)
inline void Olk::_PostItem::PutBodyFormat ( enum OlBodyFormat BodyFormat ) {
    HRESULT _hr = put_BodyFormat(BodyFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1801)
inline enum Olk::OlDownloadState Olk::_PostItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1802)
inline HRESULT Olk::_PostItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1803)
inline long Olk::_PostItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1804)
inline void Olk::_PostItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1805)
inline enum Olk::OlRemoteStatus Olk::_PostItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1806)
inline void Olk::_PostItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1807)
inline VARIANT_BOOL Olk::_PostItem::SetACLs ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SetACLs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1808)
inline VARIANT_BOOL Olk::_PostItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1809)
inline VARIANT_BOOL Olk::_PostItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1810)
inline Olk::ConflictsPtr Olk::_PostItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

#pragma implementation_key(1811)
inline _bstr_t Olk::_PostItem::GetSenderEmailAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1812)
inline _bstr_t Olk::_PostItem::GetSenderEmailType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SenderEmailType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface _RemoteItem wrapper method implementations
//

#pragma implementation_key(1813)
inline Olk::_ApplicationPtr Olk::_RemoteItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1814)
inline enum Olk::OlObjectClass Olk::_RemoteItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1815)
inline Olk::_NameSpacePtr Olk::_RemoteItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1816)
inline IDispatchPtr Olk::_RemoteItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1817)
inline Olk::ActionsPtr Olk::_RemoteItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1818)
inline Olk::AttachmentsPtr Olk::_RemoteItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1819)
inline _bstr_t Olk::_RemoteItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1820)
inline void Olk::_RemoteItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1821)
inline _bstr_t Olk::_RemoteItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1822)
inline void Olk::_RemoteItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1823)
inline _bstr_t Olk::_RemoteItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1824)
inline void Olk::_RemoteItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1825)
inline _bstr_t Olk::_RemoteItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1826)
inline void Olk::_RemoteItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1827)
inline _bstr_t Olk::_RemoteItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1828)
inline _bstr_t Olk::_RemoteItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1829)
inline DATE Olk::_RemoteItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1830)
inline _bstr_t Olk::_RemoteItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1831)
inline Olk::FormDescriptionPtr Olk::_RemoteItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1832)
inline Olk::_InspectorPtr Olk::_RemoteItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1833)
inline enum Olk::OlImportance Olk::_RemoteItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1834)
inline void Olk::_RemoteItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1835)
inline DATE Olk::_RemoteItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1836)
inline IUnknownPtr Olk::_RemoteItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1837)
inline _bstr_t Olk::_RemoteItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1838)
inline void Olk::_RemoteItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1839)
inline _bstr_t Olk::_RemoteItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1840)
inline void Olk::_RemoteItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1841)
inline VARIANT_BOOL Olk::_RemoteItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1842)
inline void Olk::_RemoteItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1843)
inline long Olk::_RemoteItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1844)
inline _bstr_t Olk::_RemoteItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1845)
inline VARIANT_BOOL Olk::_RemoteItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1846)
inline enum Olk::OlSensitivity Olk::_RemoteItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1847)
inline void Olk::_RemoteItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1848)
inline long Olk::_RemoteItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1849)
inline _bstr_t Olk::_RemoteItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1850)
inline void Olk::_RemoteItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1851)
inline VARIANT_BOOL Olk::_RemoteItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1852)
inline void Olk::_RemoteItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1853)
inline Olk::UserPropertiesPtr Olk::_RemoteItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1854)
inline HRESULT Olk::_RemoteItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1855)
inline IDispatchPtr Olk::_RemoteItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1856)
inline HRESULT Olk::_RemoteItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1857)
inline HRESULT Olk::_RemoteItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1858)
inline IDispatchPtr Olk::_RemoteItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1859)
inline HRESULT Olk::_RemoteItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1860)
inline HRESULT Olk::_RemoteItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1861)
inline HRESULT Olk::_RemoteItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1862)
inline VARIANT_BOOL Olk::_RemoteItem::GetHasAttachment ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasAttachment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1863)
inline _bstr_t Olk::_RemoteItem::GetRemoteMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RemoteMessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1864)
inline long Olk::_RemoteItem::GetTransferSize ( ) {
    long _result = 0;
    HRESULT _hr = get_TransferSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1865)
inline long Olk::_RemoteItem::GetTransferTime ( ) {
    long _result = 0;
    HRESULT _hr = get_TransferTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1866)
inline Olk::LinksPtr Olk::_RemoteItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1867)
inline enum Olk::OlDownloadState Olk::_RemoteItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1868)
inline HRESULT Olk::_RemoteItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1869)
inline Olk::ItemPropertiesPtr Olk::_RemoteItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1870)
inline enum Olk::OlRemoteStatus Olk::_RemoteItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1871)
inline void Olk::_RemoteItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1872)
inline VARIANT_BOOL Olk::_RemoteItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1873)
inline VARIANT_BOOL Olk::_RemoteItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1874)
inline Olk::ConflictsPtr Olk::_RemoteItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _ReportItem wrapper method implementations
//

#pragma implementation_key(1875)
inline Olk::_ApplicationPtr Olk::_ReportItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1876)
inline enum Olk::OlObjectClass Olk::_ReportItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1877)
inline Olk::_NameSpacePtr Olk::_ReportItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1878)
inline IDispatchPtr Olk::_ReportItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1879)
inline Olk::ActionsPtr Olk::_ReportItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1880)
inline Olk::AttachmentsPtr Olk::_ReportItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1881)
inline _bstr_t Olk::_ReportItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1882)
inline void Olk::_ReportItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1883)
inline _bstr_t Olk::_ReportItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1884)
inline void Olk::_ReportItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1885)
inline _bstr_t Olk::_ReportItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1886)
inline void Olk::_ReportItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1887)
inline _bstr_t Olk::_ReportItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1888)
inline void Olk::_ReportItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1889)
inline _bstr_t Olk::_ReportItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1890)
inline _bstr_t Olk::_ReportItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1891)
inline DATE Olk::_ReportItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1892)
inline _bstr_t Olk::_ReportItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1893)
inline Olk::FormDescriptionPtr Olk::_ReportItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1894)
inline Olk::_InspectorPtr Olk::_ReportItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1895)
inline enum Olk::OlImportance Olk::_ReportItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1896)
inline void Olk::_ReportItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1897)
inline DATE Olk::_ReportItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1898)
inline IUnknownPtr Olk::_ReportItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1899)
inline _bstr_t Olk::_ReportItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1900)
inline void Olk::_ReportItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1901)
inline _bstr_t Olk::_ReportItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1902)
inline void Olk::_ReportItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1903)
inline VARIANT_BOOL Olk::_ReportItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1904)
inline void Olk::_ReportItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1905)
inline long Olk::_ReportItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1906)
inline _bstr_t Olk::_ReportItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1907)
inline VARIANT_BOOL Olk::_ReportItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1908)
inline enum Olk::OlSensitivity Olk::_ReportItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1909)
inline void Olk::_ReportItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1910)
inline long Olk::_ReportItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1911)
inline _bstr_t Olk::_ReportItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1912)
inline void Olk::_ReportItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1913)
inline VARIANT_BOOL Olk::_ReportItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1914)
inline void Olk::_ReportItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1915)
inline Olk::UserPropertiesPtr Olk::_ReportItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1916)
inline HRESULT Olk::_ReportItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1917)
inline IDispatchPtr Olk::_ReportItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1918)
inline HRESULT Olk::_ReportItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1919)
inline HRESULT Olk::_ReportItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1920)
inline IDispatchPtr Olk::_ReportItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1921)
inline HRESULT Olk::_ReportItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1922)
inline HRESULT Olk::_ReportItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1923)
inline HRESULT Olk::_ReportItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1924)
inline Olk::LinksPtr Olk::_ReportItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(1925)
inline enum Olk::OlDownloadState Olk::_ReportItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1926)
inline HRESULT Olk::_ReportItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1927)
inline Olk::ItemPropertiesPtr Olk::_ReportItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(1928)
inline enum Olk::OlRemoteStatus Olk::_ReportItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1929)
inline void Olk::_ReportItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1930)
inline VARIANT_BOOL Olk::_ReportItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1931)
inline VARIANT_BOOL Olk::_ReportItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1932)
inline Olk::ConflictsPtr Olk::_ReportItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _TaskItem wrapper method implementations
//

#pragma implementation_key(1933)
inline Olk::_ApplicationPtr Olk::_TaskItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(1934)
inline enum Olk::OlObjectClass Olk::_TaskItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1935)
inline Olk::_NameSpacePtr Olk::_TaskItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(1936)
inline IDispatchPtr Olk::_TaskItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1937)
inline Olk::ActionsPtr Olk::_TaskItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(1938)
inline Olk::AttachmentsPtr Olk::_TaskItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(1939)
inline _bstr_t Olk::_TaskItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1940)
inline void Olk::_TaskItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1941)
inline _bstr_t Olk::_TaskItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1942)
inline void Olk::_TaskItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1943)
inline _bstr_t Olk::_TaskItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1944)
inline void Olk::_TaskItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1945)
inline _bstr_t Olk::_TaskItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1946)
inline void Olk::_TaskItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1947)
inline _bstr_t Olk::_TaskItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1948)
inline _bstr_t Olk::_TaskItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1949)
inline DATE Olk::_TaskItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1950)
inline _bstr_t Olk::_TaskItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1951)
inline Olk::FormDescriptionPtr Olk::_TaskItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(1952)
inline Olk::_InspectorPtr Olk::_TaskItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(1953)
inline enum Olk::OlImportance Olk::_TaskItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1954)
inline void Olk::_TaskItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1955)
inline DATE Olk::_TaskItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1956)
inline IUnknownPtr Olk::_TaskItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1957)
inline _bstr_t Olk::_TaskItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1958)
inline void Olk::_TaskItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1959)
inline _bstr_t Olk::_TaskItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1960)
inline void Olk::_TaskItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1961)
inline VARIANT_BOOL Olk::_TaskItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1962)
inline void Olk::_TaskItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1963)
inline long Olk::_TaskItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1964)
inline _bstr_t Olk::_TaskItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1965)
inline VARIANT_BOOL Olk::_TaskItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1966)
inline enum Olk::OlSensitivity Olk::_TaskItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1967)
inline void Olk::_TaskItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1968)
inline long Olk::_TaskItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1969)
inline _bstr_t Olk::_TaskItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1970)
inline void Olk::_TaskItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1971)
inline VARIANT_BOOL Olk::_TaskItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1972)
inline void Olk::_TaskItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1973)
inline Olk::UserPropertiesPtr Olk::_TaskItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(1974)
inline HRESULT Olk::_TaskItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1975)
inline IDispatchPtr Olk::_TaskItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1976)
inline HRESULT Olk::_TaskItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1977)
inline HRESULT Olk::_TaskItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1978)
inline IDispatchPtr Olk::_TaskItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1979)
inline HRESULT Olk::_TaskItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1980)
inline HRESULT Olk::_TaskItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1981)
inline HRESULT Olk::_TaskItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1982)
inline long Olk::_TaskItem::GetActualWork ( ) {
    long _result = 0;
    HRESULT _hr = get_ActualWork(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1983)
inline void Olk::_TaskItem::PutActualWork ( long ActualWork ) {
    HRESULT _hr = put_ActualWork(ActualWork);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1984)
inline _bstr_t Olk::_TaskItem::GetCardData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CardData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1985)
inline void Olk::_TaskItem::PutCardData ( _bstr_t CardData ) {
    HRESULT _hr = put_CardData(CardData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1986)
inline VARIANT_BOOL Olk::_TaskItem::GetComplete ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Complete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1987)
inline void Olk::_TaskItem::PutComplete ( VARIANT_BOOL Complete ) {
    HRESULT _hr = put_Complete(Complete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1988)
inline _bstr_t Olk::_TaskItem::GetContacts ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1989)
inline void Olk::_TaskItem::PutContacts ( _bstr_t Contacts ) {
    HRESULT _hr = put_Contacts(Contacts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1990)
inline _bstr_t Olk::_TaskItem::GetContactNames ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ContactNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1991)
inline void Olk::_TaskItem::PutContactNames ( _bstr_t ContactNames ) {
    HRESULT _hr = put_ContactNames(ContactNames);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1992)
inline DATE Olk::_TaskItem::GetDateCompleted ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DateCompleted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1993)
inline void Olk::_TaskItem::PutDateCompleted ( DATE DateCompleted ) {
    HRESULT _hr = put_DateCompleted(DateCompleted);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1994)
inline enum Olk::OlTaskDelegationState Olk::_TaskItem::GetDelegationState ( ) {
    enum OlTaskDelegationState _result;
    HRESULT _hr = get_DelegationState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1995)
inline _bstr_t Olk::_TaskItem::GetDelegator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Delegator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1996)
inline DATE Olk::_TaskItem::GetDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1997)
inline void Olk::_TaskItem::PutDueDate ( DATE DueDate ) {
    HRESULT _hr = put_DueDate(DueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1998)
inline VARIANT_BOOL Olk::_TaskItem::GetIsRecurring ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRecurring(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1999)
inline long Olk::_TaskItem::GetOrdinal ( ) {
    long _result = 0;
    HRESULT _hr = get_Ordinal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2000)
inline void Olk::_TaskItem::PutOrdinal ( long Ordinal ) {
    HRESULT _hr = put_Ordinal(Ordinal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2001)
inline _bstr_t Olk::_TaskItem::GetOwner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Owner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2002)
inline void Olk::_TaskItem::PutOwner ( _bstr_t Owner ) {
    HRESULT _hr = put_Owner(Owner);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2003)
inline enum Olk::OlTaskOwnership Olk::_TaskItem::GetOwnership ( ) {
    enum OlTaskOwnership _result;
    HRESULT _hr = get_Ownership(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2004)
inline long Olk::_TaskItem::GetPercentComplete ( ) {
    long _result = 0;
    HRESULT _hr = get_PercentComplete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2005)
inline void Olk::_TaskItem::PutPercentComplete ( long PercentComplete ) {
    HRESULT _hr = put_PercentComplete(PercentComplete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2006)
inline Olk::RecipientsPtr Olk::_TaskItem::GetRecipients ( ) {
    struct Recipients * _result = 0;
    HRESULT _hr = get_Recipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecipientsPtr(_result, false);
}

#pragma implementation_key(2007)
inline DATE Olk::_TaskItem::GetReminderTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_ReminderTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2008)
inline void Olk::_TaskItem::PutReminderTime ( DATE ReminderTime ) {
    HRESULT _hr = put_ReminderTime(ReminderTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2009)
inline VARIANT_BOOL Olk::_TaskItem::GetReminderOverrideDefault ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderOverrideDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2010)
inline void Olk::_TaskItem::PutReminderOverrideDefault ( VARIANT_BOOL ReminderOverrideDefault ) {
    HRESULT _hr = put_ReminderOverrideDefault(ReminderOverrideDefault);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2011)
inline VARIANT_BOOL Olk::_TaskItem::GetReminderPlaySound ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderPlaySound(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2012)
inline void Olk::_TaskItem::PutReminderPlaySound ( VARIANT_BOOL ReminderPlaySound ) {
    HRESULT _hr = put_ReminderPlaySound(ReminderPlaySound);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2013)
inline VARIANT_BOOL Olk::_TaskItem::GetReminderSet ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReminderSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2014)
inline void Olk::_TaskItem::PutReminderSet ( VARIANT_BOOL ReminderSet ) {
    HRESULT _hr = put_ReminderSet(ReminderSet);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2015)
inline _bstr_t Olk::_TaskItem::GetReminderSoundFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReminderSoundFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2016)
inline void Olk::_TaskItem::PutReminderSoundFile ( _bstr_t ReminderSoundFile ) {
    HRESULT _hr = put_ReminderSoundFile(ReminderSoundFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2017)
inline enum Olk::OlTaskResponse Olk::_TaskItem::GetResponseState ( ) {
    enum OlTaskResponse _result;
    HRESULT _hr = get_ResponseState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2018)
inline _bstr_t Olk::_TaskItem::GetRole ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Role(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2019)
inline void Olk::_TaskItem::PutRole ( _bstr_t Role ) {
    HRESULT _hr = put_Role(Role);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2020)
inline _bstr_t Olk::_TaskItem::GetSchedulePlusPriority ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SchedulePlusPriority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2021)
inline void Olk::_TaskItem::PutSchedulePlusPriority ( _bstr_t SchedulePlusPriority ) {
    HRESULT _hr = put_SchedulePlusPriority(SchedulePlusPriority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2022)
inline DATE Olk::_TaskItem::GetStartDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_StartDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2023)
inline void Olk::_TaskItem::PutStartDate ( DATE StartDate ) {
    HRESULT _hr = put_StartDate(StartDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2024)
inline enum Olk::OlTaskStatus Olk::_TaskItem::GetStatus ( ) {
    enum OlTaskStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2025)
inline void Olk::_TaskItem::PutStatus ( enum OlTaskStatus Status ) {
    HRESULT _hr = put_Status(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2026)
inline _bstr_t Olk::_TaskItem::GetStatusOnCompletionRecipients ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusOnCompletionRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2027)
inline void Olk::_TaskItem::PutStatusOnCompletionRecipients ( _bstr_t StatusOnCompletionRecipients ) {
    HRESULT _hr = put_StatusOnCompletionRecipients(StatusOnCompletionRecipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2028)
inline _bstr_t Olk::_TaskItem::GetStatusUpdateRecipients ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_StatusUpdateRecipients(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2029)
inline void Olk::_TaskItem::PutStatusUpdateRecipients ( _bstr_t StatusUpdateRecipients ) {
    HRESULT _hr = put_StatusUpdateRecipients(StatusUpdateRecipients);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2030)
inline VARIANT_BOOL Olk::_TaskItem::GetTeamTask ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TeamTask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2031)
inline void Olk::_TaskItem::PutTeamTask ( VARIANT_BOOL TeamTask ) {
    HRESULT _hr = put_TeamTask(TeamTask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2032)
inline long Olk::_TaskItem::GetTotalWork ( ) {
    long _result = 0;
    HRESULT _hr = get_TotalWork(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2033)
inline void Olk::_TaskItem::PutTotalWork ( long TotalWork ) {
    HRESULT _hr = put_TotalWork(TotalWork);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2034)
inline Olk::_TaskItemPtr Olk::_TaskItem::Assign ( ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_Assign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(2035)
inline HRESULT Olk::_TaskItem::CancelResponseState ( ) {
    HRESULT _hr = raw_CancelResponseState();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2036)
inline HRESULT Olk::_TaskItem::ClearRecurrencePattern ( ) {
    HRESULT _hr = raw_ClearRecurrencePattern();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2037)
inline Olk::RecurrencePatternPtr Olk::_TaskItem::GetRecurrencePattern ( ) {
    struct RecurrencePattern * _result = 0;
    HRESULT _hr = raw_GetRecurrencePattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RecurrencePatternPtr(_result, false);
}

#pragma implementation_key(2038)
inline HRESULT Olk::_TaskItem::MarkComplete ( ) {
    HRESULT _hr = raw_MarkComplete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2039)
inline Olk::_TaskItemPtr Olk::_TaskItem::Respond ( enum OlTaskResponse Response, const _variant_t & fNoUI, const _variant_t & fAdditionalTextDialog ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_Respond(Response, fNoUI, fAdditionalTextDialog, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(2040)
inline HRESULT Olk::_TaskItem::Send ( ) {
    HRESULT _hr = raw_Send();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2041)
inline VARIANT_BOOL Olk::_TaskItem::SkipRecurrence ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_SkipRecurrence(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2042)
inline IDispatchPtr Olk::_TaskItem::StatusReport ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_StatusReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2043)
inline Olk::LinksPtr Olk::_TaskItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2044)
inline enum Olk::OlDownloadState Olk::_TaskItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2045)
inline HRESULT Olk::_TaskItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2046)
inline Olk::ItemPropertiesPtr Olk::_TaskItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2047)
inline long Olk::_TaskItem::GetInternetCodepage ( ) {
    long _result = 0;
    HRESULT _hr = get_InternetCodepage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2048)
inline void Olk::_TaskItem::PutInternetCodepage ( long InternetCodepage ) {
    HRESULT _hr = put_InternetCodepage(InternetCodepage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2049)
inline enum Olk::OlRemoteStatus Olk::_TaskItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2050)
inline void Olk::_TaskItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2051)
inline VARIANT_BOOL Olk::_TaskItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2052)
inline VARIANT_BOOL Olk::_TaskItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2053)
inline Olk::ConflictsPtr Olk::_TaskItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _TaskRequestAcceptItem wrapper method implementations
//

#pragma implementation_key(2054)
inline Olk::_ApplicationPtr Olk::_TaskRequestAcceptItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2055)
inline enum Olk::OlObjectClass Olk::_TaskRequestAcceptItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2056)
inline Olk::_NameSpacePtr Olk::_TaskRequestAcceptItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2057)
inline IDispatchPtr Olk::_TaskRequestAcceptItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2058)
inline Olk::ActionsPtr Olk::_TaskRequestAcceptItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(2059)
inline Olk::AttachmentsPtr Olk::_TaskRequestAcceptItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(2060)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2061)
inline void Olk::_TaskRequestAcceptItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2062)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2063)
inline void Olk::_TaskRequestAcceptItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2064)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2065)
inline void Olk::_TaskRequestAcceptItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2066)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2067)
inline void Olk::_TaskRequestAcceptItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2068)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2069)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2070)
inline DATE Olk::_TaskRequestAcceptItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2071)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2072)
inline Olk::FormDescriptionPtr Olk::_TaskRequestAcceptItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(2073)
inline Olk::_InspectorPtr Olk::_TaskRequestAcceptItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2074)
inline enum Olk::OlImportance Olk::_TaskRequestAcceptItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2075)
inline void Olk::_TaskRequestAcceptItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2076)
inline DATE Olk::_TaskRequestAcceptItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2077)
inline IUnknownPtr Olk::_TaskRequestAcceptItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2078)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2079)
inline void Olk::_TaskRequestAcceptItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2080)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2081)
inline void Olk::_TaskRequestAcceptItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2082)
inline VARIANT_BOOL Olk::_TaskRequestAcceptItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2083)
inline void Olk::_TaskRequestAcceptItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2084)
inline long Olk::_TaskRequestAcceptItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2085)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2086)
inline VARIANT_BOOL Olk::_TaskRequestAcceptItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2087)
inline enum Olk::OlSensitivity Olk::_TaskRequestAcceptItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2088)
inline void Olk::_TaskRequestAcceptItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2089)
inline long Olk::_TaskRequestAcceptItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2090)
inline _bstr_t Olk::_TaskRequestAcceptItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2091)
inline void Olk::_TaskRequestAcceptItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2092)
inline VARIANT_BOOL Olk::_TaskRequestAcceptItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2093)
inline void Olk::_TaskRequestAcceptItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2094)
inline Olk::UserPropertiesPtr Olk::_TaskRequestAcceptItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(2095)
inline HRESULT Olk::_TaskRequestAcceptItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2096)
inline IDispatchPtr Olk::_TaskRequestAcceptItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2097)
inline HRESULT Olk::_TaskRequestAcceptItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2098)
inline HRESULT Olk::_TaskRequestAcceptItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2099)
inline IDispatchPtr Olk::_TaskRequestAcceptItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2100)
inline HRESULT Olk::_TaskRequestAcceptItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2101)
inline HRESULT Olk::_TaskRequestAcceptItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2102)
inline HRESULT Olk::_TaskRequestAcceptItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2103)
inline Olk::_TaskItemPtr Olk::_TaskRequestAcceptItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(2104)
inline Olk::LinksPtr Olk::_TaskRequestAcceptItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2105)
inline enum Olk::OlDownloadState Olk::_TaskRequestAcceptItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2106)
inline HRESULT Olk::_TaskRequestAcceptItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2107)
inline Olk::ItemPropertiesPtr Olk::_TaskRequestAcceptItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2108)
inline enum Olk::OlRemoteStatus Olk::_TaskRequestAcceptItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2109)
inline void Olk::_TaskRequestAcceptItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2110)
inline VARIANT_BOOL Olk::_TaskRequestAcceptItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2111)
inline VARIANT_BOOL Olk::_TaskRequestAcceptItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2112)
inline Olk::ConflictsPtr Olk::_TaskRequestAcceptItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _TaskRequestDeclineItem wrapper method implementations
//

#pragma implementation_key(2113)
inline Olk::_ApplicationPtr Olk::_TaskRequestDeclineItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2114)
inline enum Olk::OlObjectClass Olk::_TaskRequestDeclineItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2115)
inline Olk::_NameSpacePtr Olk::_TaskRequestDeclineItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2116)
inline IDispatchPtr Olk::_TaskRequestDeclineItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2117)
inline Olk::ActionsPtr Olk::_TaskRequestDeclineItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(2118)
inline Olk::AttachmentsPtr Olk::_TaskRequestDeclineItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(2119)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2120)
inline void Olk::_TaskRequestDeclineItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2121)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2122)
inline void Olk::_TaskRequestDeclineItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2123)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2124)
inline void Olk::_TaskRequestDeclineItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2125)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2126)
inline void Olk::_TaskRequestDeclineItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2127)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2128)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2129)
inline DATE Olk::_TaskRequestDeclineItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2130)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2131)
inline Olk::FormDescriptionPtr Olk::_TaskRequestDeclineItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(2132)
inline Olk::_InspectorPtr Olk::_TaskRequestDeclineItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2133)
inline enum Olk::OlImportance Olk::_TaskRequestDeclineItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2134)
inline void Olk::_TaskRequestDeclineItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2135)
inline DATE Olk::_TaskRequestDeclineItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2136)
inline IUnknownPtr Olk::_TaskRequestDeclineItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2137)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2138)
inline void Olk::_TaskRequestDeclineItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2139)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2140)
inline void Olk::_TaskRequestDeclineItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2141)
inline VARIANT_BOOL Olk::_TaskRequestDeclineItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2142)
inline void Olk::_TaskRequestDeclineItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2143)
inline long Olk::_TaskRequestDeclineItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2144)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2145)
inline VARIANT_BOOL Olk::_TaskRequestDeclineItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2146)
inline enum Olk::OlSensitivity Olk::_TaskRequestDeclineItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2147)
inline void Olk::_TaskRequestDeclineItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2148)
inline long Olk::_TaskRequestDeclineItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2149)
inline _bstr_t Olk::_TaskRequestDeclineItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2150)
inline void Olk::_TaskRequestDeclineItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2151)
inline VARIANT_BOOL Olk::_TaskRequestDeclineItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2152)
inline void Olk::_TaskRequestDeclineItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2153)
inline Olk::UserPropertiesPtr Olk::_TaskRequestDeclineItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(2154)
inline HRESULT Olk::_TaskRequestDeclineItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2155)
inline IDispatchPtr Olk::_TaskRequestDeclineItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2156)
inline HRESULT Olk::_TaskRequestDeclineItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2157)
inline HRESULT Olk::_TaskRequestDeclineItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2158)
inline IDispatchPtr Olk::_TaskRequestDeclineItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2159)
inline HRESULT Olk::_TaskRequestDeclineItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2160)
inline HRESULT Olk::_TaskRequestDeclineItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2161)
inline HRESULT Olk::_TaskRequestDeclineItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2162)
inline Olk::_TaskItemPtr Olk::_TaskRequestDeclineItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(2163)
inline Olk::LinksPtr Olk::_TaskRequestDeclineItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2164)
inline enum Olk::OlDownloadState Olk::_TaskRequestDeclineItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2165)
inline HRESULT Olk::_TaskRequestDeclineItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2166)
inline Olk::ItemPropertiesPtr Olk::_TaskRequestDeclineItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2167)
inline enum Olk::OlRemoteStatus Olk::_TaskRequestDeclineItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2168)
inline void Olk::_TaskRequestDeclineItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2169)
inline VARIANT_BOOL Olk::_TaskRequestDeclineItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2170)
inline VARIANT_BOOL Olk::_TaskRequestDeclineItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2171)
inline Olk::ConflictsPtr Olk::_TaskRequestDeclineItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _TaskRequestItem wrapper method implementations
//

#pragma implementation_key(2172)
inline Olk::_ApplicationPtr Olk::_TaskRequestItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2173)
inline enum Olk::OlObjectClass Olk::_TaskRequestItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2174)
inline Olk::_NameSpacePtr Olk::_TaskRequestItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2175)
inline IDispatchPtr Olk::_TaskRequestItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2176)
inline Olk::ActionsPtr Olk::_TaskRequestItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(2177)
inline Olk::AttachmentsPtr Olk::_TaskRequestItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(2178)
inline _bstr_t Olk::_TaskRequestItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2179)
inline void Olk::_TaskRequestItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2180)
inline _bstr_t Olk::_TaskRequestItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2181)
inline void Olk::_TaskRequestItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2182)
inline _bstr_t Olk::_TaskRequestItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2183)
inline void Olk::_TaskRequestItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2184)
inline _bstr_t Olk::_TaskRequestItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2185)
inline void Olk::_TaskRequestItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2186)
inline _bstr_t Olk::_TaskRequestItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2187)
inline _bstr_t Olk::_TaskRequestItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2188)
inline DATE Olk::_TaskRequestItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2189)
inline _bstr_t Olk::_TaskRequestItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2190)
inline Olk::FormDescriptionPtr Olk::_TaskRequestItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(2191)
inline Olk::_InspectorPtr Olk::_TaskRequestItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2192)
inline enum Olk::OlImportance Olk::_TaskRequestItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2193)
inline void Olk::_TaskRequestItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2194)
inline DATE Olk::_TaskRequestItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2195)
inline IUnknownPtr Olk::_TaskRequestItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2196)
inline _bstr_t Olk::_TaskRequestItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2197)
inline void Olk::_TaskRequestItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2198)
inline _bstr_t Olk::_TaskRequestItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2199)
inline void Olk::_TaskRequestItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2200)
inline VARIANT_BOOL Olk::_TaskRequestItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2201)
inline void Olk::_TaskRequestItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2202)
inline long Olk::_TaskRequestItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2203)
inline _bstr_t Olk::_TaskRequestItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2204)
inline VARIANT_BOOL Olk::_TaskRequestItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2205)
inline enum Olk::OlSensitivity Olk::_TaskRequestItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2206)
inline void Olk::_TaskRequestItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2207)
inline long Olk::_TaskRequestItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2208)
inline _bstr_t Olk::_TaskRequestItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2209)
inline void Olk::_TaskRequestItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2210)
inline VARIANT_BOOL Olk::_TaskRequestItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2211)
inline void Olk::_TaskRequestItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2212)
inline Olk::UserPropertiesPtr Olk::_TaskRequestItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(2213)
inline HRESULT Olk::_TaskRequestItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2214)
inline IDispatchPtr Olk::_TaskRequestItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2215)
inline HRESULT Olk::_TaskRequestItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2216)
inline HRESULT Olk::_TaskRequestItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2217)
inline IDispatchPtr Olk::_TaskRequestItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2218)
inline HRESULT Olk::_TaskRequestItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2219)
inline HRESULT Olk::_TaskRequestItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2220)
inline HRESULT Olk::_TaskRequestItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2221)
inline Olk::_TaskItemPtr Olk::_TaskRequestItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(2222)
inline Olk::LinksPtr Olk::_TaskRequestItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2223)
inline enum Olk::OlDownloadState Olk::_TaskRequestItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2224)
inline HRESULT Olk::_TaskRequestItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2225)
inline Olk::ItemPropertiesPtr Olk::_TaskRequestItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2226)
inline enum Olk::OlRemoteStatus Olk::_TaskRequestItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2227)
inline void Olk::_TaskRequestItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2228)
inline VARIANT_BOOL Olk::_TaskRequestItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2229)
inline VARIANT_BOOL Olk::_TaskRequestItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2230)
inline Olk::ConflictsPtr Olk::_TaskRequestItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

//
// interface _TaskRequestUpdateItem wrapper method implementations
//

#pragma implementation_key(2231)
inline Olk::_ApplicationPtr Olk::_TaskRequestUpdateItem::GetApplication ( ) {
    struct _Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _ApplicationPtr(_result, false);
}

#pragma implementation_key(2232)
inline enum Olk::OlObjectClass Olk::_TaskRequestUpdateItem::GetClass ( ) {
    enum OlObjectClass _result;
    HRESULT _hr = get_Class(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2233)
inline Olk::_NameSpacePtr Olk::_TaskRequestUpdateItem::GetSession ( ) {
    struct _NameSpace * _result = 0;
    HRESULT _hr = get_Session(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _NameSpacePtr(_result, false);
}

#pragma implementation_key(2234)
inline IDispatchPtr Olk::_TaskRequestUpdateItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2235)
inline Olk::ActionsPtr Olk::_TaskRequestUpdateItem::GetActions ( ) {
    struct Actions * _result = 0;
    HRESULT _hr = get_Actions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ActionsPtr(_result, false);
}

#pragma implementation_key(2236)
inline Olk::AttachmentsPtr Olk::_TaskRequestUpdateItem::GetAttachments ( ) {
    struct Attachments * _result = 0;
    HRESULT _hr = get_Attachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AttachmentsPtr(_result, false);
}

#pragma implementation_key(2237)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetBillingInformation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BillingInformation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2238)
inline void Olk::_TaskRequestUpdateItem::PutBillingInformation ( _bstr_t BillingInformation ) {
    HRESULT _hr = put_BillingInformation(BillingInformation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2239)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetBody ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2240)
inline void Olk::_TaskRequestUpdateItem::PutBody ( _bstr_t Body ) {
    HRESULT _hr = put_Body(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2241)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetCategories ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Categories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2242)
inline void Olk::_TaskRequestUpdateItem::PutCategories ( _bstr_t Categories ) {
    HRESULT _hr = put_Categories(Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2243)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetCompanies ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Companies(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2244)
inline void Olk::_TaskRequestUpdateItem::PutCompanies ( _bstr_t Companies ) {
    HRESULT _hr = put_Companies(Companies);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2245)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetConversationIndex ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2246)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetConversationTopic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConversationTopic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2247)
inline DATE Olk::_TaskRequestUpdateItem::GetCreationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2248)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetEntryID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_EntryID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2249)
inline Olk::FormDescriptionPtr Olk::_TaskRequestUpdateItem::GetFormDescription ( ) {
    struct FormDescription * _result = 0;
    HRESULT _hr = get_FormDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FormDescriptionPtr(_result, false);
}

#pragma implementation_key(2250)
inline Olk::_InspectorPtr Olk::_TaskRequestUpdateItem::GetGetInspector ( ) {
    struct _Inspector * _result = 0;
    HRESULT _hr = get_GetInspector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _InspectorPtr(_result, false);
}

#pragma implementation_key(2251)
inline enum Olk::OlImportance Olk::_TaskRequestUpdateItem::GetImportance ( ) {
    enum OlImportance _result;
    HRESULT _hr = get_Importance(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2252)
inline void Olk::_TaskRequestUpdateItem::PutImportance ( enum OlImportance Importance ) {
    HRESULT _hr = put_Importance(Importance);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2253)
inline DATE Olk::_TaskRequestUpdateItem::GetLastModificationTime ( ) {
    DATE _result = 0;
    HRESULT _hr = get_LastModificationTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2254)
inline IUnknownPtr Olk::_TaskRequestUpdateItem::GetMAPIOBJECT ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_MAPIOBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(2255)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetMessageClass ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2256)
inline void Olk::_TaskRequestUpdateItem::PutMessageClass ( _bstr_t MessageClass ) {
    HRESULT _hr = put_MessageClass(MessageClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2257)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetMileage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Mileage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2258)
inline void Olk::_TaskRequestUpdateItem::PutMileage ( _bstr_t Mileage ) {
    HRESULT _hr = put_Mileage(Mileage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2259)
inline VARIANT_BOOL Olk::_TaskRequestUpdateItem::GetNoAging ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NoAging(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2260)
inline void Olk::_TaskRequestUpdateItem::PutNoAging ( VARIANT_BOOL NoAging ) {
    HRESULT _hr = put_NoAging(NoAging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2261)
inline long Olk::_TaskRequestUpdateItem::GetOutlookInternalVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_OutlookInternalVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2262)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetOutlookVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OutlookVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2263)
inline VARIANT_BOOL Olk::_TaskRequestUpdateItem::GetSaved ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Saved(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2264)
inline enum Olk::OlSensitivity Olk::_TaskRequestUpdateItem::GetSensitivity ( ) {
    enum OlSensitivity _result;
    HRESULT _hr = get_Sensitivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2265)
inline void Olk::_TaskRequestUpdateItem::PutSensitivity ( enum OlSensitivity Sensitivity ) {
    HRESULT _hr = put_Sensitivity(Sensitivity);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2266)
inline long Olk::_TaskRequestUpdateItem::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2267)
inline _bstr_t Olk::_TaskRequestUpdateItem::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(2268)
inline void Olk::_TaskRequestUpdateItem::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2269)
inline VARIANT_BOOL Olk::_TaskRequestUpdateItem::GetUnRead ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UnRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2270)
inline void Olk::_TaskRequestUpdateItem::PutUnRead ( VARIANT_BOOL UnRead ) {
    HRESULT _hr = put_UnRead(UnRead);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2271)
inline Olk::UserPropertiesPtr Olk::_TaskRequestUpdateItem::GetUserProperties ( ) {
    struct UserProperties * _result = 0;
    HRESULT _hr = get_UserProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPropertiesPtr(_result, false);
}

#pragma implementation_key(2272)
inline HRESULT Olk::_TaskRequestUpdateItem::Close ( enum OlInspectorClose SaveMode ) {
    HRESULT _hr = raw_Close(SaveMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2273)
inline IDispatchPtr Olk::_TaskRequestUpdateItem::Copy ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2274)
inline HRESULT Olk::_TaskRequestUpdateItem::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2275)
inline HRESULT Olk::_TaskRequestUpdateItem::Display ( const _variant_t & Modal ) {
    HRESULT _hr = raw_Display(Modal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2276)
inline IDispatchPtr Olk::_TaskRequestUpdateItem::Move ( struct MAPIFolder * DestFldr ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Move(DestFldr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(2277)
inline HRESULT Olk::_TaskRequestUpdateItem::PrintOut ( ) {
    HRESULT _hr = raw_PrintOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2278)
inline HRESULT Olk::_TaskRequestUpdateItem::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2279)
inline HRESULT Olk::_TaskRequestUpdateItem::SaveAs ( _bstr_t Path, const _variant_t & Type ) {
    HRESULT _hr = raw_SaveAs(Path, Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2280)
inline Olk::_TaskItemPtr Olk::_TaskRequestUpdateItem::GetAssociatedTask ( VARIANT_BOOL AddToTaskList ) {
    struct _TaskItem * _result = 0;
    HRESULT _hr = raw_GetAssociatedTask(AddToTaskList, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _TaskItemPtr(_result, false);
}

#pragma implementation_key(2281)
inline Olk::LinksPtr Olk::_TaskRequestUpdateItem::GetLinks ( ) {
    struct Links * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LinksPtr(_result, false);
}

#pragma implementation_key(2282)
inline enum Olk::OlDownloadState Olk::_TaskRequestUpdateItem::GetDownloadState ( ) {
    enum OlDownloadState _result;
    HRESULT _hr = get_DownloadState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2283)
inline HRESULT Olk::_TaskRequestUpdateItem::ShowCategoriesDialog ( ) {
    HRESULT _hr = raw_ShowCategoriesDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(2284)
inline Olk::ItemPropertiesPtr Olk::_TaskRequestUpdateItem::GetItemProperties ( ) {
    struct ItemProperties * _result = 0;
    HRESULT _hr = get_ItemProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ItemPropertiesPtr(_result, false);
}

#pragma implementation_key(2285)
inline enum Olk::OlRemoteStatus Olk::_TaskRequestUpdateItem::GetMarkForDownload ( ) {
    enum OlRemoteStatus _result;
    HRESULT _hr = get_MarkForDownload(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2286)
inline void Olk::_TaskRequestUpdateItem::PutMarkForDownload ( enum OlRemoteStatus MarkForDownload ) {
    HRESULT _hr = put_MarkForDownload(MarkForDownload);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(2287)
inline VARIANT_BOOL Olk::_TaskRequestUpdateItem::GetIsConflict ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsConflict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2288)
inline VARIANT_BOOL Olk::_TaskRequestUpdateItem::GetAutoResolvedWinner ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoResolvedWinner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(2289)
inline Olk::ConflictsPtr Olk::_TaskRequestUpdateItem::GetConflicts ( ) {
    struct Conflicts * _result = 0;
    HRESULT _hr = get_Conflicts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConflictsPtr(_result, false);
}

<project name="Ajax" default="war">

	<property environment="env"/>
	
	<property name='name'				value='kabuki'/>
	<property name='contextPath'		value='/${name}'/>
	
	<property name="build.dir"			location="build"/>
	<property name='build.classes.dir'	location='${build.dir}/classes'/>
	<property name="build.examples.dir"	location="${build.dir}/WebRoot/examples"/>
	<property name='build.i18n.dir'		location='${build.dir}/i18n'/>
	<property name="build.common.dir"	location="${build.examples.dir}/common"/>
	<property name="build.img"			location="${build.dir}/WebRoot/img"/>
	
	<property name="jars.dir"           location="jars"/>
	<property name="src.dir"            location="src"/>
	<property name="images.dir"			location="img"/>

	<property name="warfile"            location="${build.dir}/${name}.war"/>
	
	<property name="deploy.war" value="${warfile}"/>
	<property name="deploy.url" value="http://localhost:7070/manager/"/>
	<property name="deploy.user" value="${env.DEPLOY_USER}"/>
	<property name="deploy.password" value="${env.DEPLOY_PASSWORD}"/>
	<property name="deploy.path" value="${contextPath}"/>

	<property name="images.loRes.destDir" value="${build.common.dir}/img/loRes"/>
	<property name="images.animated.destDir" value="${build.common.dir}/img/animated"/>
	<property name="images.cssFile" value="dwtimgs.css"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="jars/ant-contrib-1.0b1.jar"/>
		</classpath>
	</taskdef>
  
	<path id="class.path">
		<fileset dir="${jars.dir}">
			<include name="**/*.jar"/>
		</fileset>
        <pathelement path="../ZimbraCommon/build/classes" />
    </path>

	<target name="compile" depends="build-init" description="compile the filter source" >
		   <!-- Compile the java code from ${src} into ${build} -->
		    <mkdir dir='${build.classes.dir}'/>
		    <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="on">
		      <classpath refid="class.path"/>
		      <include name="**/*.java"/>
		    </javac>

		    <!-- define imagemerge task -->
		    <pathconvert property='imagemerge.cp' pathsep='${path.separator}'>
		      <path>
		        <pathelement location='${build.classes.dir}'/>
		        <fileset dir='${jars.dir}' includes='**/*.jar'/>
		      </path>
		    </pathconvert>
		    <taskdef name='imagemerge' 
		      classname='com.zimbra.kabuki.tools.img.ImageMergeTask'
		      classpath='${imagemerge.cp}'
		      />

	</target>

	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="class.path"/>
  
	<target name="build-init">
		<mkdir dir="${build.dir}/WebRoot/js"/>
	</target>

	<target name="clean" depends="build-init" description="Removes any temporary files">
		<delete dir="${build.dir}"/>
	</target>

	<target name='i18n-check' depends='compile'>
		<taskdef name='i18ncheck' 
				 classname='com.zimbra.kabuki.tools.i18n.ComparePropsTask'
				 classpath='${build.classes.dir}'
		/>
		<property name='msgs.dir' value='WebRoot/js/config/msgs' />
		<i18ncheck>
			<sourcefile file='${msgs.dir}/AjxMsg.properties' />
			<targetfileset dir='${msgs.dir}' includes='AjxMsg_*.properties' />
		</i18ncheck>
	</target>

	<target name='i18n' depends='i18n-init,compile' unless='i18n-done'>
		<taskdef name='i18n' 
				 classname='com.zimbra.kabuki.tools.i18n.GenerateDataTask'
				 classpath='${build.classes.dir}'
		/>
		<mkdir dir='${build.i18n.dir}/msgs' />
		<i18n destdir='${build.i18n.dir}/msgs' />
	</target>
	<target name='i18n-init'>
		<available property='i18n-done' file='${build.i18n.dir}/msgs/I18nMsg.properties' />
	</target>
	
	<target name="copy-files-to-build-area">
		<copy file="WebRoot/WEB-INF/web.xml" tofile="${build.dir}/WebRoot/WEB-INF/web.xml" overwrite="true"/>
		<copy todir="${build.dir}/WebRoot/examples/" overwrite="true" >
			<fileset dir="WebRoot/examples" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		<copy todir="${build.dir}/WebRoot/" overwrite="true" >
			<fileset dir="WebRoot/" includes="js/**/*_en.js"/>
		</copy>
	</target>


	<target name='images'>
		<antcall target='build-images'>
			<param name="csspathprefix" value="${contextPath}/examples/common/img/"/>
		</antcall>    
	</target>		
	
	<target name='images-are-dirty' description='checks to see if images need to be processed' unless='images.force'>
		<dependset>
			<srcfileset dir='img' includes='**/*'/>
			<targetfilelist dir='${images.loRes.destDir}' files='${images.cssFile}'/>
		</dependset>
	    <available property='imagesdone' file='${images.loRes.destDir}/${images.cssFile}'/>
	</target>
	
	 <target name='build-images' depends='images-are-dirty,compile' unless='imagesdone'>
	    <!-- copy animated images 
	    Since the imagemerge program does not support animated GIFs we have to use the
	    copy ant task and manually create the CSS rules -->
	    <echo/>
	    <echo message='Copying animated images'/>
	    <echo/>
	    <copy todir="${images.animated.destDir}">
	      <fileset dir="img/animated"  includes="*"/>
	    </copy>

	    <!-- merge loRes images -->
	    <mkdir dir="${images.loRes.destDir}"/>
	    <delete file='${images.loRes.destDir}/${images.cssFile}'/>
	    <echo/>

	    <echo message='Merging low resolution dwt images'/>
	    <echo/>
	    <imagemerge destdir='${images.loRes.destDir}' disable='true'
	      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
	      <dirset dir='img/loRes' includes='*' excludes='**/examples,**/shadow_border'/>
	    </imagemerge>

	    <echo message='Copying non-mergeable low resolution dwt images'/>
	    <echo/>
	    <imagemerge destdir='${images.loRes.destDir}' copy='true' disable='true'
	      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
	      <dirset dir='img/loRes' includes='**/examples,**/shadow_border'/>
	    </imagemerge>
	  </target>
	
	
	<target name="htmleditorexample">
		<copy todir="${build.examples.dir}/htmlEditor" overwrite="true" >
			<fileset dir="WebRoot/examples/htmlEditor" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		
		<!--   NOTE: images now coming from the common "htmlEdit" directory -->
	</target>
	
	<target name="dataviewerexample">
		<copy todir="${build.examples.dir}/dataViewer" overwrite="true" >
			<fileset dir="WebRoot/examples/dataViewer" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		
		<!--   NOTE: images now coming from the common "examples" directory -->
	</target>

	<target name="mixingexample">
		<copy todir="${build.examples.dir}/mixing" overwrite="true" >
			<fileset dir="WebRoot/examples/mixing" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		<!--   NOTE: images now coming from the common "examples" directory -->	
	</target>
	
	<target name="mixingexample2">
		<copy todir="${build.examples.dir}/mixing2" overwrite="true" >
			<fileset dir="WebRoot/examples/mixing2" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		<!--   NOTE: images now coming from the common "examples" directory -->	
	</target>
	
	<target name="treeexample">
		<copy todir="${build.examples.dir}/tree" overwrite="true" >
			<fileset dir="WebRoot/examples/tree" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		
		<!--   NOTE: images now coming from the common "examples" directory -->
	</target>
	
	<target name="xformsexample">
		<copy todir="${build.examples.dir}/xforms_test" overwrite="true" >
			<fileset dir="WebRoot/examples/xforms_test" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
	</target>
		
	<target name="examples" depends="images, htmleditorexample, treeexample, dataviewerexample, mixingexample, mixingexample2, xformsexample"/>
	
	<!-- 
	This target is meant only to be run after a full deploy has
	been done once. If there are any java changes, another
	deploy will have to be run.
	-->
	<target name="dev-sync" depends='deploy-init'>
		<echo message="Deploy Dir: ${env.DEPLOY_DIR}/${deploy.path}"/>
		<copy verbose="true" todir="${env.DEPLOY_DIR}${deploy.path}">
			<fileset dir="WebRoot" includes="js/**,examples/**" excludes="examples/**/img/"/>
		</copy>
		<copy verbose="true" todir="${env.DEPLOY_DIR}${deploy.path}/WEB-INF">  	
			<fileset dir="${build.dir}/WebRoot/WEB-INF" includes="web.xml"/>
			<fileset dir="WebRoot/WEB-INF" includes="tlds/*"/>		
		</copy>
	</target>

	<target name="war" depends="build-init, copy-files-to-build-area, i18n, examples">
		<war warfile="${warfile}" webxml="${build.dir}/WebRoot/WEB-INF/web.xml">
			<!--lib dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar"/-->
			<classes dir="${build.classes.dir}" includes="**/*.class" excludes="**/tools/**"/>
			<classes dir="WebRoot/js/config" includes="msgs/*.properties"/>
			<classes dir="${build.i18n.dir}" includes="msgs/*.properties"/>
			<webinf dir="WebRoot/WEB-INF" includes="tlds/*"/>
			<fileset dir="WebRoot" includes="js/**" excludes='js/**/config/msgs/**'/>
			<fileset dir="${build.dir}/WebRoot" includes="examples/**"/>
	    </war>
	  </target>

	<target name="deploy" depends="deploy-init,war">
		<deploy url="${deploy.url}" username="${deploy.user}" password="${deploy.password}"
			    path="${deploy.path}" war="${deploy.war}" update="true"/>
	</target>
	
	<target name='deploy-init'>
		<fail unless='env.DEPLOY_DIR'>Must set DEPLOY_DIR environment variable.</fail>
		<fail unless='env.DEPLOY_USER'>Must set DEPLOY_USER environment variable.</fail>
		<fail unless='env.DEPLOY_PASSWORD'>Must set DEPLOY_PASSWORD environment variable.</fail>
	</target>
    
</project>

